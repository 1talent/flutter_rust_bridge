// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports

import 'dart:convert';
import 'dart:typed_data';

import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'dart:ffi' as ffi;

abstract class ApiClass2 {
  /// Documentation on a simple adder function.
  Future<int> simpleAdder2({required int a, required int b, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSimpleAdder2ConstMeta;
}

class ApiClass2Impl extends FlutterRustBridgeBase<ApiClass2Wire>
    implements ApiClass2 {
  factory ApiClass2Impl(ffi.DynamicLibrary dylib) =>
      ApiClass2Impl.raw(ApiClass2Wire(dylib));

  ApiClass2Impl.raw(ApiClass2Wire inner) : super(inner);

  Future<int> simpleAdder2({required int a, required int b, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_simple_adder_2(
            port_, _api2wire_i32(a), _api2wire_i32(b)),
        parseSuccessData: _wire2api_i32,
        constMeta: kSimpleAdder2ConstMeta,
        argValues: [a, b],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kSimpleAdder2ConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "simple_adder_2",
        argNames: ["a", "b"],
      );

  // Section: api2wire
  int _api2wire_i32(int raw) {
    return raw;
  }

  // Section: api_fill_to_wire

}

// Section: wire2api
int _wire2api_i32(dynamic raw) {
  return raw as int;
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class ApiClass2Wire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  ApiClass2Wire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  ApiClass2Wire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<wire_ApplicationSettings>
      new_box_autoadd_application_settings_1() {
    return _new_box_autoadd_application_settings_1();
  }

  late final _new_box_autoadd_application_settings_1Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_ApplicationSettings> Function()>>(
      'new_box_autoadd_application_settings_1');
  late final _new_box_autoadd_application_settings_1 =
      _new_box_autoadd_application_settings_1Ptr
          .asFunction<ffi.Pointer<wire_ApplicationSettings> Function()>();

  ffi.Pointer<wire_Customized> new_box_autoadd_customized_1() {
    return _new_box_autoadd_customized_1();
  }

  late final _new_box_autoadd_customized_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Customized> Function()>>(
          'new_box_autoadd_customized_1');
  late final _new_box_autoadd_customized_1 = _new_box_autoadd_customized_1Ptr
      .asFunction<ffi.Pointer<wire_Customized> Function()>();

  ffi.Pointer<wire_KitchenSink> new_box_autoadd_kitchen_sink_1() {
    return _new_box_autoadd_kitchen_sink_1();
  }

  late final _new_box_autoadd_kitchen_sink_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_KitchenSink> Function()>>(
          'new_box_autoadd_kitchen_sink_1');
  late final _new_box_autoadd_kitchen_sink_1 =
      _new_box_autoadd_kitchen_sink_1Ptr
          .asFunction<ffi.Pointer<wire_KitchenSink> Function()>();

  ffi.Pointer<wire_MySize> new_box_autoadd_my_size_1() {
    return _new_box_autoadd_my_size_1();
  }

  late final _new_box_autoadd_my_size_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_MySize> Function()>>(
          'new_box_autoadd_my_size_1');
  late final _new_box_autoadd_my_size_1 = _new_box_autoadd_my_size_1Ptr
      .asFunction<ffi.Pointer<wire_MySize> Function()>();

  ffi.Pointer<wire_MyStruct> new_box_autoadd_my_struct_1() {
    return _new_box_autoadd_my_struct_1();
  }

  late final _new_box_autoadd_my_struct_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_MyStruct> Function()>>(
          'new_box_autoadd_my_struct_1');
  late final _new_box_autoadd_my_struct_1 = _new_box_autoadd_my_struct_1Ptr
      .asFunction<ffi.Pointer<wire_MyStruct> Function()>();

  ffi.Pointer<wire_MyTreeNode> new_box_autoadd_my_tree_node_1() {
    return _new_box_autoadd_my_tree_node_1();
  }

  late final _new_box_autoadd_my_tree_node_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_MyTreeNode> Function()>>(
          'new_box_autoadd_my_tree_node_1');
  late final _new_box_autoadd_my_tree_node_1 =
      _new_box_autoadd_my_tree_node_1Ptr
          .asFunction<ffi.Pointer<wire_MyTreeNode> Function()>();

  ffi.Pointer<wire_UserId> new_box_autoadd_user_id_1() {
    return _new_box_autoadd_user_id_1();
  }

  late final _new_box_autoadd_user_id_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_UserId> Function()>>(
          'new_box_autoadd_user_id_1');
  late final _new_box_autoadd_user_id_1 = _new_box_autoadd_user_id_1Ptr
      .asFunction<ffi.Pointer<wire_UserId> Function()>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();

  void wire_simple_adder_2(
    int port_,
    int a,
    int b,
  ) {
    return _wire_simple_adder_2(
      port_,
      a,
      b,
    );
  }

  late final _wire_simple_adder_2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Int32, ffi.Int32)>>('wire_simple_adder_2');
  late final _wire_simple_adder_2 =
      _wire_simple_adder_2Ptr.asFunction<void Function(int, int, int)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_ApplicationEnvVar extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;

  @ffi.Uint8()
  external int field1;
}

class wire_list_application_env_var extends ffi.Struct {
  external ffi.Pointer<wire_ApplicationEnvVar> ptr;

  @ffi.Int32()
  external int len;
}

class wire_ApplicationEnv extends ffi.Struct {
  external ffi.Pointer<wire_list_application_env_var> vars;
}

class wire_ApplicationSettings extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> name;

  external ffi.Pointer<wire_uint_8_list> version;

  @ffi.Int32()
  external int mode;

  external ffi.Pointer<wire_ApplicationEnv> env;
}

class wire_Customized extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> final_field;

  external ffi.Pointer<wire_uint_8_list> non_final_field;
}

class KitchenSink_Empty extends ffi.Opaque {}

class KitchenSink_Primitives extends ffi.Struct {
  @ffi.Int32()
  external int int32;

  @ffi.Double()
  external double float64;

  @ffi.Uint8()
  external int boolean;
}

class KitchenSink_Nested extends ffi.Struct {
  external ffi.Pointer<wire_KitchenSink> field0;

  @ffi.Int32()
  external int field1;
}

class wire_KitchenSink extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<KitchenSinkKind> kind;
}

class KitchenSinkKind extends ffi.Union {
  external ffi.Pointer<KitchenSink_Empty> Empty;

  external ffi.Pointer<KitchenSink_Primitives> Primitives;

  external ffi.Pointer<KitchenSink_Nested> Nested;

  external ffi.Pointer<KitchenSink_Optional> Optional;

  external ffi.Pointer<KitchenSink_Buffer> Buffer;

  external ffi.Pointer<KitchenSink_Enums> Enums;
}

class KitchenSink_Optional extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> field0;

  external ffi.Pointer<ffi.Int32> field1;
}

class KitchenSink_Buffer extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

class KitchenSink_Enums extends ffi.Struct {
  @ffi.Int32()
  external int field0;
}

class wire_MySize extends ffi.Struct {
  @ffi.Int32()
  external int width;

  @ffi.Int32()
  external int height;
}

class wire_MyStruct extends ffi.Struct {
  @ffi.Uint8()
  external int content;
}

class wire_list_my_tree_node extends ffi.Struct {
  external ffi.Pointer<wire_MyTreeNode> ptr;

  @ffi.Int32()
  external int len;
}

class wire_MyTreeNode extends ffi.Struct {
  @ffi.Int32()
  external int value_i32;

  external ffi.Pointer<wire_uint_8_list> value_vec_u8;

  @ffi.Uint8()
  external int value_boolean;

  external ffi.Pointer<wire_list_my_tree_node> children;
}

class wire_UserId extends ffi.Struct {
  @ffi.Uint32()
  external int value;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Uint8 Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
