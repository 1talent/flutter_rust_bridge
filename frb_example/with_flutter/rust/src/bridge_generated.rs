#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;

// Section: imports

// Section: wire functions

fn wire_draw_mandelbrot_impl(
    port_: MessagePort,
    image_size: impl Wire2Api<Size> + UnwindSafe,
    zoom_point: impl Wire2Api<Point> + UnwindSafe,
    scale: impl Wire2Api<f64> + UnwindSafe,
    num_threads: impl Wire2Api<i32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "draw_mandelbrot",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_image_size = image_size.wire2api();
            let api_zoom_point = zoom_point.wire2api();
            let api_scale = scale.wire2api();
            let api_num_threads = num_threads.wire2api();
            move |task_callback| {
                draw_mandelbrot(api_image_size, api_zoom_point, api_scale, api_num_threads)
            }
        },
    )
}
fn wire_passing_complex_structs_impl(
    port_: MessagePort,
    root: impl Wire2Api<TreeNode> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "passing_complex_structs",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_root = root.wire2api();
            move |task_callback| Ok(passing_complex_structs(api_root))
        },
    )
}
fn wire_returning_structs_with_boxed_fields_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "returning_structs_with_boxed_fields",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(returning_structs_with_boxed_fields()),
    )
}
fn wire_off_topic_memory_test_input_array_impl(
    port_: MessagePort,
    input: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "off_topic_memory_test_input_array",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_input = input.wire2api();
            move |task_callback| Ok(off_topic_memory_test_input_array(api_input))
        },
    )
}
fn wire_off_topic_memory_test_output_zero_copy_buffer_impl(
    port_: MessagePort,
    len: impl Wire2Api<i32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "off_topic_memory_test_output_zero_copy_buffer",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_len = len.wire2api();
            move |task_callback| Ok(off_topic_memory_test_output_zero_copy_buffer(api_len))
        },
    )
}
fn wire_off_topic_memory_test_output_vec_u8_impl(
    port_: MessagePort,
    len: impl Wire2Api<i32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "off_topic_memory_test_output_vec_u8",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_len = len.wire2api();
            move |task_callback| Ok(off_topic_memory_test_output_vec_u8(api_len))
        },
    )
}
fn wire_off_topic_memory_test_input_vec_of_object_impl(
    port_: MessagePort,
    input: impl Wire2Api<Vec<Size>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "off_topic_memory_test_input_vec_of_object",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_input = input.wire2api();
            move |task_callback| Ok(off_topic_memory_test_input_vec_of_object(api_input))
        },
    )
}
fn wire_off_topic_memory_test_output_vec_of_object_impl(
    port_: MessagePort,
    len: impl Wire2Api<i32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "off_topic_memory_test_output_vec_of_object",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_len = len.wire2api();
            move |task_callback| Ok(off_topic_memory_test_output_vec_of_object(api_len))
        },
    )
}
fn wire_off_topic_memory_test_input_complex_struct_impl(
    port_: MessagePort,
    input: impl Wire2Api<TreeNode> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "off_topic_memory_test_input_complex_struct",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_input = input.wire2api();
            move |task_callback| Ok(off_topic_memory_test_input_complex_struct(api_input))
        },
    )
}
fn wire_off_topic_memory_test_output_complex_struct_impl(
    port_: MessagePort,
    len: impl Wire2Api<i32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "off_topic_memory_test_output_complex_struct",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_len = len.wire2api();
            move |task_callback| Ok(off_topic_memory_test_output_complex_struct(api_len))
        },
    )
}
fn wire_off_topic_deliberately_return_error_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "off_topic_deliberately_return_error",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| off_topic_deliberately_return_error(),
    )
}
fn wire_off_topic_deliberately_panic_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "off_topic_deliberately_panic",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(off_topic_deliberately_panic()),
    )
}
// Section: wrapper structs

// Section: static checks

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

impl Wire2Api<f64> for f64 {
    fn wire2api(self) -> f64 {
        self
    }
}
impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}

impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for BoxedPoint {
    fn into_dart(self) -> support::DartCObject {
        vec![(*self.point).into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for BoxedPoint {}

impl support::IntoDart for Point {
    fn into_dart(self) -> support::DartCObject {
        vec![self.x.into_dart(), self.y.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Point {}

impl support::IntoDart for Size {
    fn into_dart(self) -> support::DartCObject {
        vec![self.width.into_dart(), self.height.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Size {}

impl support::IntoDart for TreeNode {
    fn into_dart(self) -> support::DartCObject {
        vec![self.name.into_dart(), self.children.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for TreeNode {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    use super::*;
    #[wasm_bindgen]
    pub fn wire_draw_mandelbrot(
        port_: MessagePort,
        image_size: JsValue,
        zoom_point: JsValue,
        scale: f64,
        num_threads: i32,
    ) {
        wire_draw_mandelbrot_impl(port_, image_size, zoom_point, scale, num_threads)
    }
    #[wasm_bindgen]
    pub fn wire_passing_complex_structs(port_: MessagePort, root: JsValue) {
        wire_passing_complex_structs_impl(port_, root)
    }
    #[wasm_bindgen]
    pub fn wire_returning_structs_with_boxed_fields(port_: MessagePort) {
        wire_returning_structs_with_boxed_fields_impl(port_)
    }
    #[wasm_bindgen]
    pub fn wire_off_topic_memory_test_input_array(port_: MessagePort, input: Box<[u8]>) {
        wire_off_topic_memory_test_input_array_impl(port_, input)
    }
    #[wasm_bindgen]
    pub fn wire_off_topic_memory_test_output_zero_copy_buffer(port_: MessagePort, len: i32) {
        wire_off_topic_memory_test_output_zero_copy_buffer_impl(port_, len)
    }
    #[wasm_bindgen]
    pub fn wire_off_topic_memory_test_output_vec_u8(port_: MessagePort, len: i32) {
        wire_off_topic_memory_test_output_vec_u8_impl(port_, len)
    }
    #[wasm_bindgen]
    pub fn wire_off_topic_memory_test_input_vec_of_object(port_: MessagePort, input: JsValue) {
        wire_off_topic_memory_test_input_vec_of_object_impl(port_, input)
    }
    #[wasm_bindgen]
    pub fn wire_off_topic_memory_test_output_vec_of_object(port_: MessagePort, len: i32) {
        wire_off_topic_memory_test_output_vec_of_object_impl(port_, len)
    }
    #[wasm_bindgen]
    pub fn wire_off_topic_memory_test_input_complex_struct(port_: MessagePort, input: JsValue) {
        wire_off_topic_memory_test_input_complex_struct_impl(port_, input)
    }
    #[wasm_bindgen]
    pub fn wire_off_topic_memory_test_output_complex_struct(port_: MessagePort, len: i32) {
        wire_off_topic_memory_test_output_complex_struct_impl(port_, len)
    }
    #[wasm_bindgen]
    pub fn wire_off_topic_deliberately_return_error(port_: MessagePort) {
        wire_off_topic_deliberately_return_error_impl(port_)
    }
    #[wasm_bindgen]
    pub fn wire_off_topic_deliberately_panic(port_: MessagePort) {
        wire_off_topic_deliberately_panic_impl(port_)
    }
    impl Wire2Api<String> for String {
        fn wire2api(self) -> String {
            self
        }
    }

    impl Wire2Api<Vec<Size>> for JsValue {
        fn wire2api(self) -> Vec<Size> {
            self.unchecked_into::<JsArray>()
                .iter()
                .map(Wire2Api::wire2api)
                .collect()
        }
    }
    impl Wire2Api<Vec<TreeNode>> for JsValue {
        fn wire2api(self) -> Vec<TreeNode> {
            self.unchecked_into::<JsArray>()
                .iter()
                .map(Wire2Api::wire2api)
                .collect()
        }
    }
    impl Wire2Api<Point> for JsValue {
        fn wire2api(self) -> Point {
            let self_ = self.unchecked_into::<JsArray>();
            Point {
                x: self_.get(0).wire2api(),
                y: self_.get(1).wire2api(),
            }
        }
    }
    impl Wire2Api<Size> for JsValue {
        fn wire2api(self) -> Size {
            let self_ = self.unchecked_into::<JsArray>();
            Size {
                width: self_.get(0).wire2api(),
                height: self_.get(1).wire2api(),
            }
        }
    }
    impl Wire2Api<TreeNode> for JsValue {
        fn wire2api(self) -> TreeNode {
            let self_ = self.unchecked_into::<JsArray>();
            TreeNode {
                name: self_.get(0).wire2api(),
                children: self_.get(1).wire2api(),
            }
        }
    }

    impl Wire2Api<Vec<u8>> for Box<[u8]> {
        fn wire2api(self) -> Vec<u8> {
            self.into_vec()
        }
    }
    // Section: impl Wire2Api for JsValue

    impl Wire2Api<String> for JsValue {
        fn wire2api(self) -> String {
            self.as_string().expect("non-UTF-8 string, or not a string")
        }
    }
    impl Wire2Api<f64> for JsValue {
        fn wire2api(self) -> f64 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<i32> for JsValue {
        fn wire2api(self) -> i32 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<u8> for JsValue {
        fn wire2api(self) -> u8 {
            self.unchecked_into_f64() as _
        }
    }
}
#[cfg(target_family = "wasm")]
pub use web::*;

#[cfg(not(target_family = "wasm"))]
mod io {
    use super::*;

    #[no_mangle]
    pub extern "C" fn wire_draw_mandelbrot(
        port_: i64,
        image_size: *mut wire_Size,
        zoom_point: *mut wire_Point,
        scale: f64,
        num_threads: i32,
    ) {
        wire_draw_mandelbrot_impl(port_, image_size, zoom_point, scale, num_threads)
    }

    #[no_mangle]
    pub extern "C" fn wire_passing_complex_structs(port_: i64, root: *mut wire_TreeNode) {
        wire_passing_complex_structs_impl(port_, root)
    }

    #[no_mangle]
    pub extern "C" fn wire_returning_structs_with_boxed_fields(port_: i64) {
        wire_returning_structs_with_boxed_fields_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_off_topic_memory_test_input_array(
        port_: i64,
        input: *mut wire_uint_8_list,
    ) {
        wire_off_topic_memory_test_input_array_impl(port_, input)
    }

    #[no_mangle]
    pub extern "C" fn wire_off_topic_memory_test_output_zero_copy_buffer(port_: i64, len: i32) {
        wire_off_topic_memory_test_output_zero_copy_buffer_impl(port_, len)
    }

    #[no_mangle]
    pub extern "C" fn wire_off_topic_memory_test_output_vec_u8(port_: i64, len: i32) {
        wire_off_topic_memory_test_output_vec_u8_impl(port_, len)
    }

    #[no_mangle]
    pub extern "C" fn wire_off_topic_memory_test_input_vec_of_object(
        port_: i64,
        input: *mut wire_list_size,
    ) {
        wire_off_topic_memory_test_input_vec_of_object_impl(port_, input)
    }

    #[no_mangle]
    pub extern "C" fn wire_off_topic_memory_test_output_vec_of_object(port_: i64, len: i32) {
        wire_off_topic_memory_test_output_vec_of_object_impl(port_, len)
    }

    #[no_mangle]
    pub extern "C" fn wire_off_topic_memory_test_input_complex_struct(
        port_: i64,
        input: *mut wire_TreeNode,
    ) {
        wire_off_topic_memory_test_input_complex_struct_impl(port_, input)
    }

    #[no_mangle]
    pub extern "C" fn wire_off_topic_memory_test_output_complex_struct(port_: i64, len: i32) {
        wire_off_topic_memory_test_output_complex_struct_impl(port_, len)
    }

    #[no_mangle]
    pub extern "C" fn wire_off_topic_deliberately_return_error(port_: i64) {
        wire_off_topic_deliberately_return_error_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_off_topic_deliberately_panic(port_: i64) {
        wire_off_topic_deliberately_panic_impl(port_)
    }

    // Section: wire structs

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_list_size {
        ptr: *mut wire_Size,
        len: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_list_tree_node {
        ptr: *mut wire_TreeNode,
        len: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_Point {
        x: f64,
        y: f64,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_Size {
        width: i32,
        height: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_TreeNode {
        name: *mut wire_uint_8_list,
        children: *mut wire_list_tree_node,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_uint_8_list {
        ptr: *mut u8,
        len: i32,
    }

    // Section: allocate functions

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_point_0() -> *mut wire_Point {
        support::new_leak_box_ptr(wire_Point::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_size_0() -> *mut wire_Size {
        support::new_leak_box_ptr(wire_Size::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_tree_node_0() -> *mut wire_TreeNode {
        support::new_leak_box_ptr(wire_TreeNode::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_list_size_0(len: i32) -> *mut wire_list_size {
        let wrap = wire_list_size {
            ptr: support::new_leak_vec_ptr(<wire_Size>::new_with_null_ptr(), len),
            len,
        };
        support::new_leak_box_ptr(wrap)
    }

    #[no_mangle]
    pub extern "C" fn new_list_tree_node_0(len: i32) -> *mut wire_list_tree_node {
        let wrap = wire_list_tree_node {
            ptr: support::new_leak_vec_ptr(<wire_TreeNode>::new_with_null_ptr(), len),
            len,
        };
        support::new_leak_box_ptr(wrap)
    }

    #[no_mangle]
    pub extern "C" fn new_uint_8_list_0(len: i32) -> *mut wire_uint_8_list {
        let ans = wire_uint_8_list {
            ptr: support::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        support::new_leak_box_ptr(ans)
    }

    impl Wire2Api<String> for *mut wire_uint_8_list {
        fn wire2api(self) -> String {
            let vec: Vec<u8> = self.wire2api();
            String::from_utf8_lossy(&vec).into_owned()
        }
    }
    impl Wire2Api<Point> for *mut wire_Point {
        fn wire2api(self) -> Point {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<Point>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<Size> for *mut wire_Size {
        fn wire2api(self) -> Size {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<Size>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<TreeNode> for *mut wire_TreeNode {
        fn wire2api(self) -> TreeNode {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<TreeNode>::wire2api(*wrap).into()
        }
    }

    impl Wire2Api<Vec<Size>> for *mut wire_list_size {
        fn wire2api(self) -> Vec<Size> {
            let vec = unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(Wire2Api::wire2api).collect()
        }
    }
    impl Wire2Api<Vec<TreeNode>> for *mut wire_list_tree_node {
        fn wire2api(self) -> Vec<TreeNode> {
            let vec = unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(Wire2Api::wire2api).collect()
        }
    }
    impl Wire2Api<Point> for wire_Point {
        fn wire2api(self) -> Point {
            Point {
                x: self.x.wire2api(),
                y: self.y.wire2api(),
            }
        }
    }
    impl Wire2Api<Size> for wire_Size {
        fn wire2api(self) -> Size {
            Size {
                width: self.width.wire2api(),
                height: self.height.wire2api(),
            }
        }
    }
    impl Wire2Api<TreeNode> for wire_TreeNode {
        fn wire2api(self) -> TreeNode {
            TreeNode {
                name: self.name.wire2api(),
                children: self.children.wire2api(),
            }
        }
    }

    impl Wire2Api<Vec<u8>> for *mut wire_uint_8_list {
        fn wire2api(self) -> Vec<u8> {
            unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            }
        }
    }
    // Section: impl NewWithNullPtr

    pub trait NewWithNullPtr {
        fn new_with_null_ptr() -> Self;
    }

    impl<T> NewWithNullPtr for *mut T {
        fn new_with_null_ptr() -> Self {
            std::ptr::null_mut()
        }
    }

    impl NewWithNullPtr for wire_Point {
        fn new_with_null_ptr() -> Self {
            Self {
                x: Default::default(),
                y: Default::default(),
            }
        }
    }

    impl NewWithNullPtr for wire_Size {
        fn new_with_null_ptr() -> Self {
            Self {
                width: Default::default(),
                height: Default::default(),
            }
        }
    }

    impl NewWithNullPtr for wire_TreeNode {
        fn new_with_null_ptr() -> Self {
            Self {
                name: core::ptr::null_mut(),
                children: core::ptr::null_mut(),
            }
        }
    }

    // Section: sync execution mode utility

    #[no_mangle]
    pub extern "C" fn free_WireSyncReturnStruct(val: support::WireSyncReturnStruct) {
        unsafe {
            let _ = support::vec_from_leak_ptr(val.ptr, val.len);
        }
    }
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;
