import 'dart:ffi';
import 'dart:io';
import 'dart:math';
import 'dart:typed_data';

import 'package:flutter/material.dart';
import 'package:flutter_rust_bridge_example/generated_api.dart';
import 'package:flutter_rust_bridge_example/generated_wire.dart';

// Simple Flutter code. If you are not familiar with Flutter, this may sounds a bit long. But indeed
// it is quite trivial and Flutter is just like that. Please refer to Flutter's tutorial to learn Flutter.

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return const MaterialApp(
      title: 'Flutter Rust Bridge Example',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({Key? key}) : super(key: key);

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  late final dylib =
      Platform.isAndroid ? DynamicLibrary.open('libflutter_rust_bridge_example.so') : DynamicLibrary.process();
  late final api = ExampleApi(ExampleWire(dylib));

  Uint8List? exampleImage;
  String? exampleText;

  @override
  void initState() {
    super.initState();
    _callExampleFfi();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Flutter Rust Bridge Example'),
      ),
      body: ListView(
        children: [
          const Text('Image generated by Rust and displayed by Flutter/Dart:'),
          if (exampleImage != null) Image.memory(exampleImage!),
          const Text('Another example demonstrating how complex struct/class is automatically passed through FFI:'),
          if (exampleText != null) Text(exampleText!),
        ],
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () => _callExampleFfi(),
        child: const Icon(Icons.refresh),
      ), // This trailing comma makes auto-formatting nicer for build methods.
    );
  }

  Future<void> _callExampleFfi() async {
    final randomValue = Random().nextDouble();

    final receivedText = await api.treeTraversal(root: _createExampleTree());
    setState(() => exampleText = receivedText);

    final receivedImage = await api.drawMandelbrot(
        imageSize: Size(width: 200, height: 200), rightBottom: Point(x: randomValue, y: randomValue), numThreads: 4);
    setState(() => exampleImage = receivedImage);
  }

  TreeNode _createExampleTree() => TreeNode(name: 'root', children: [
        for (var i = 0; i < Random().nextInt(5); ++i)
          TreeNode(
              name: 'child_$i',
              children: [for (var j = 0; j < Random().nextInt(5); ++j) TreeNode(name: 'grandchild_$j', children: [])]),
      ]);
}
