#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

use crate::api::*;
use flutter_rust_bridge::*;

// Section: imports

use crate::data::MyEnum;
use crate::data::MyStruct;

// Section: wire functions

#[wasm_bindgen]
pub fn wire_simple_adder(port_: MessagePort, a: i32, b: i32) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "simple_adder",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_a = a.wire2api();
            let api_b = b.wire2api();
            move |task_callback| Ok(simple_adder(api_a, api_b))
        },
    )
}
#[wasm_bindgen]
pub fn wire_primitive_types(
    port_: MessagePort,
    my_i32: i32,
    my_i64: i64,
    my_f64: f64,
    my_bool: bool,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "primitive_types",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_my_i32 = my_i32.wire2api();
            let api_my_i64 = my_i64.wire2api();
            let api_my_f64 = my_f64.wire2api();
            let api_my_bool = my_bool.wire2api();
            move |task_callback| {
                Ok(primitive_types(
                    api_my_i32,
                    api_my_i64,
                    api_my_f64,
                    api_my_bool,
                ))
            }
        },
    )
}
#[wasm_bindgen]
pub fn wire_primitive_u32(port_: MessagePort, my_u32: u32) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "primitive_u32",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_my_u32 = my_u32.wire2api();
            move |task_callback| Ok(primitive_u32(api_my_u32))
        },
    )
}
#[wasm_bindgen]
pub fn wire_handle_string(port_: MessagePort, s: String) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_string",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_s = s.wire2api();
            move |task_callback| Ok(handle_string(api_s))
        },
    )
}
#[wasm_bindgen]
pub fn wire_handle_return_unit(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_return_unit",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(handle_return_unit()),
    )
}
#[wasm_bindgen]
pub fn wire_handle_vec_u8(port_: MessagePort, v: Box<[u8]>) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_vec_u8",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_v = v.wire2api();
            move |task_callback| Ok(handle_vec_u8(api_v))
        },
    )
}
#[wasm_bindgen]
pub fn wire_handle_vec_of_primitive(port_: MessagePort, n: i32) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_vec_of_primitive",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_n = n.wire2api();
            move |task_callback| Ok(handle_vec_of_primitive(api_n))
        },
    )
}
#[wasm_bindgen]
pub fn wire_handle_zero_copy_vec_of_primitive(port_: MessagePort, n: i32) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_zero_copy_vec_of_primitive",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_n = n.wire2api();
            move |task_callback| Ok(handle_zero_copy_vec_of_primitive(api_n))
        },
    )
}
#[wasm_bindgen]
pub fn wire_handle_struct(port_: MessagePort, arg: Box<[JsValue]>, boxed: Box<[JsValue]>) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_struct",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            let api_boxed = boxed.wire2api();
            move |task_callback| Ok(handle_struct(api_arg, api_boxed))
        },
    )
}
#[wasm_bindgen]
pub fn wire_handle_newtype(port_: MessagePort, arg: Box<[JsValue]>) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_newtype",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| Ok(handle_newtype(api_arg))
        },
    )
}
#[wasm_bindgen]
pub fn wire_handle_list_of_struct(port_: MessagePort, l: Box<[JsValue]>) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_list_of_struct",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_l = l.wire2api();
            move |task_callback| Ok(handle_list_of_struct(api_l))
        },
    )
}
#[wasm_bindgen]
pub fn wire_handle_string_list(port_: MessagePort, names: Box<[JsString]>) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_string_list",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_names = names.wire2api();
            move |task_callback| Ok(handle_string_list(api_names))
        },
    )
}
#[wasm_bindgen]
pub fn wire_handle_complex_struct(port_: MessagePort, s: Box<[JsValue]>) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_complex_struct",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_s = s.wire2api();
            move |task_callback| Ok(handle_complex_struct(api_s))
        },
    )
}
#[wasm_bindgen]
pub fn wire_handle_sync_return(mode: String) -> support::WireSyncReturnStruct {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "handle_sync_return",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_mode = mode.wire2api();
            handle_sync_return(api_mode)
        },
    )
}
#[wasm_bindgen]
pub fn wire_handle_stream(port_: MessagePort, arg: String) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_stream",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| handle_stream(task_callback.stream_sink(), api_arg)
        },
    )
}
#[wasm_bindgen]
pub fn wire_handle_stream_of_struct(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_stream_of_struct",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || move |task_callback| handle_stream_of_struct(task_callback.stream_sink()),
    )
}
#[wasm_bindgen]
pub fn wire_return_err(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "return_err",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| return_err(),
    )
}
#[wasm_bindgen]
pub fn wire_return_panic(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "return_panic",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(return_panic()),
    )
}
#[wasm_bindgen]
pub fn wire_handle_optional_return(port_: MessagePort, left: f64, right: f64) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_optional_return",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_left = left.wire2api();
            let api_right = right.wire2api();
            move |task_callback| Ok(handle_optional_return(api_left, api_right))
        },
    )
}
#[wasm_bindgen]
pub fn wire_handle_optional_struct(port_: MessagePort, document: Option<String>) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_optional_struct",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_document = document.wire2api();
            move |task_callback| Ok(handle_optional_struct(api_document))
        },
    )
}
#[wasm_bindgen]
pub fn wire_handle_optional_increment(port_: MessagePort, opt: Option<Box<[JsValue]>>) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_optional_increment",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opt = opt.wire2api();
            move |task_callback| Ok(handle_optional_increment(api_opt))
        },
    )
}
#[wasm_bindgen]
pub fn wire_handle_increment_boxed_optional(port_: MessagePort, opt: Option<usize /* f64 */>) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_increment_boxed_optional",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opt = opt.wire2api();
            move |task_callback| Ok(handle_increment_boxed_optional(api_opt))
        },
    )
}
#[wasm_bindgen]
pub fn wire_handle_option_box_arguments(
    port_: MessagePort,
    i8box: Option<usize /* i8 */>,
    u8box: Option<usize /* u8 */>,
    i32box: Option<usize /* i32 */>,
    i64box: Option<usize /* i64 */>,
    f64box: Option<usize /* f64 */>,
    boolbox: Option<usize /* bool */>,
    structbox: Option<Box<[JsValue]>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_option_box_arguments",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_i8box = i8box.wire2api();
            let api_u8box = u8box.wire2api();
            let api_i32box = i32box.wire2api();
            let api_i64box = i64box.wire2api();
            let api_f64box = f64box.wire2api();
            let api_boolbox = boolbox.wire2api();
            let api_structbox = structbox.wire2api();
            move |task_callback| {
                Ok(handle_option_box_arguments(
                    api_i8box,
                    api_u8box,
                    api_i32box,
                    api_i64box,
                    api_f64box,
                    api_boolbox,
                    api_structbox,
                ))
            }
        },
    )
}
#[wasm_bindgen]
pub fn wire_print_note(port_: MessagePort, note: Box<[JsValue]>) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "print_note",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_note = note.wire2api();
            move |task_callback| Ok(print_note(api_note))
        },
    )
}
#[wasm_bindgen]
pub fn wire_handle_return_enum(port_: MessagePort, input: String) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_return_enum",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_input = input.wire2api();
            move |task_callback| Ok(handle_return_enum(api_input))
        },
    )
}
#[wasm_bindgen]
pub fn wire_handle_enum_parameter(port_: MessagePort, weekday: i32) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_enum_parameter",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_weekday = weekday.wire2api();
            move |task_callback| Ok(handle_enum_parameter(api_weekday))
        },
    )
}
#[wasm_bindgen]
pub fn wire_handle_customized_struct(port_: MessagePort, val: Box<[JsValue]>) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_customized_struct",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_val = val.wire2api();
            move |task_callback| Ok(handle_customized_struct(api_val))
        },
    )
}
#[wasm_bindgen]
pub fn wire_handle_enum_struct(port_: MessagePort, val: Box<[JsValue]>) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_enum_struct",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_val = val.wire2api();
            move |task_callback| Ok(handle_enum_struct(api_val))
        },
    )
}
#[wasm_bindgen]
pub fn wire_use_imported_struct(port_: MessagePort, my_struct: Box<[JsValue]>) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "use_imported_struct",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_my_struct = my_struct.wire2api();
            move |task_callback| Ok(use_imported_struct(api_my_struct))
        },
    )
}
#[wasm_bindgen]
pub fn wire_use_imported_enum(port_: MessagePort, my_enum: i32) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "use_imported_enum",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_my_enum = my_enum.wire2api();
            move |task_callback| Ok(use_imported_enum(api_my_enum))
        },
    )
}
#[wasm_bindgen]
pub fn wire_get_app_settings(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_app_settings",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(mirror_ApplicationSettings(get_app_settings())),
    )
}
#[wasm_bindgen]
pub fn wire_is_app_embedded(port_: MessagePort, app_settings: Box<[JsValue]>) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "is_app_embedded",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_app_settings = app_settings.wire2api();
            move |task_callback| Ok(is_app_embedded(api_app_settings))
        },
    )
}
#[wasm_bindgen]
pub fn wire_get_message(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_message",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(mirror_ApplicationMessage(get_message())),
    )
}
#[wasm_bindgen]
pub fn wire_get_array(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_array",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(get_array()),
    )
}
#[wasm_bindgen]
pub fn wire_get_complex_array(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_complex_array",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(get_complex_array()),
    )
}
#[wasm_bindgen]
pub fn wire_get_usize(port_: MessagePort, u: usize) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_usize",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_u = u.wire2api();
            move |task_callback| Ok(get_usize(api_u))
        },
    )
}
#[wasm_bindgen]
pub fn wire_next_user_id(port_: MessagePort, user_id: Box<[JsValue]>) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "next_user_id",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_user_id = user_id.wire2api();
            move |task_callback| Ok(next_user_id(api_user_id))
        },
    )
}
#[wasm_bindgen]
pub fn wire_register_event_listener(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "register_event_listener",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || move |task_callback| register_event_listener(task_callback.stream_sink()),
    )
}
#[wasm_bindgen]
pub fn wire_close_event_listener(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "close_event_listener",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(close_event_listener()),
    )
}
#[wasm_bindgen]
pub fn wire_create_event(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "create_event",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(create_event()),
    )
}
#[wasm_bindgen]
pub fn wire_handle_stream_sink_at_1(port_: MessagePort, key: u32, max: u32) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_stream_sink_at_1",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_key = key.wire2api();
            let api_max = max.wire2api();
            move |task_callback| {
                handle_stream_sink_at_1(api_key, api_max, task_callback.stream_sink())
            }
        },
    )
}
#[wasm_bindgen]
pub fn wire_handle_stream_sink_at_2(port_: MessagePort, key: u32, max: u32) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_stream_sink_at_2",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_key = key.wire2api();
            let api_max = max.wire2api();
            move |task_callback| {
                handle_stream_sink_at_2(api_key, task_callback.stream_sink(), api_max)
            }
        },
    )
}
#[wasm_bindgen]
pub fn wire_handle_stream_sink_at_3(port_: MessagePort, key: u32, max: u32) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_stream_sink_at_3",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_key = key.wire2api();
            let api_max = max.wire2api();
            move |task_callback| {
                handle_stream_sink_at_3(task_callback.stream_sink(), api_key, api_max)
            }
        },
    )
}
#[wasm_bindgen]
pub fn wire_sum__method__SumWith(port_: MessagePort, that: Box<[JsValue]>, y: u32, z: u32) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "sum__method__SumWith",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_y = y.wire2api();
            let api_z = z.wire2api();
            move |task_callback| Ok(SumWith::sum(&api_that, api_y, api_z))
        },
    )
}
#[wasm_bindgen]
pub fn wire_new__static_method__ConcatenateWith(port_: MessagePort, a: String) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "new__static_method__ConcatenateWith",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_a = a.wire2api();
            move |task_callback| Ok(ConcatenateWith::new(api_a))
        },
    )
}
#[wasm_bindgen]
pub fn wire_concatenate__method__ConcatenateWith(
    port_: MessagePort,
    that: Box<[JsValue]>,
    b: String,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "concatenate__method__ConcatenateWith",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_b = b.wire2api();
            move |task_callback| Ok(ConcatenateWith::concatenate(&api_that, api_b))
        },
    )
}
#[wasm_bindgen]
pub fn wire_concatenate_static__static_method__ConcatenateWith(
    port_: MessagePort,
    a: String,
    b: String,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "concatenate_static__static_method__ConcatenateWith",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_a = a.wire2api();
            let api_b = b.wire2api();
            move |task_callback| Ok(ConcatenateWith::concatenate_static(api_a, api_b))
        },
    )
}
#[wasm_bindgen]
pub fn wire_handle_some_stream_sink__method__ConcatenateWith(
    port_: MessagePort,
    that: Box<[JsValue]>,
    key: u32,
    max: u32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_some_stream_sink__method__ConcatenateWith",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_that = that.wire2api();
            let api_key = key.wire2api();
            let api_max = max.wire2api();
            move |task_callback| {
                ConcatenateWith::handle_some_stream_sink(
                    &api_that,
                    api_key,
                    api_max,
                    task_callback.stream_sink(),
                )
            }
        },
    )
}
#[wasm_bindgen]
pub fn wire_handle_some_stream_sink_at_1__method__ConcatenateWith(
    port_: MessagePort,
    that: Box<[JsValue]>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_some_stream_sink_at_1__method__ConcatenateWith",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| {
                ConcatenateWith::handle_some_stream_sink_at_1(
                    &api_that,
                    task_callback.stream_sink(),
                )
            }
        },
    )
}
#[wasm_bindgen]
pub fn wire_handle_some_static_stream_sink__static_method__ConcatenateWith(
    port_: MessagePort,
    key: u32,
    max: u32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_some_static_stream_sink__static_method__ConcatenateWith",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_key = key.wire2api();
            let api_max = max.wire2api();
            move |task_callback| {
                ConcatenateWith::handle_some_static_stream_sink(
                    api_key,
                    api_max,
                    task_callback.stream_sink(),
                )
            }
        },
    )
}
#[wasm_bindgen]
pub fn wire_handle_some_static_stream_sink_single_arg__static_method__ConcatenateWith(
    port_: MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_some_static_stream_sink_single_arg__static_method__ConcatenateWith",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            move |task_callback| {
                ConcatenateWith::handle_some_static_stream_sink_single_arg(
                    task_callback.stream_sink(),
                )
            }
        },
    )
}
// Section: wrapper structs

#[derive(Clone)]
struct mirror_ApplicationEnv(ApplicationEnv);

#[derive(Clone)]
struct mirror_ApplicationEnvVar(ApplicationEnvVar);

#[derive(Clone)]
struct mirror_ApplicationMessage(ApplicationMessage);

#[derive(Clone)]
struct mirror_ApplicationMode(ApplicationMode);

#[derive(Clone)]
struct mirror_ApplicationSettings(ApplicationSettings);

// Section: static checks

const _: fn() = || {
    {
        let ApplicationEnv = None::<ApplicationEnv>.unwrap();
        let _: Vec<ApplicationEnvVar> = ApplicationEnv.vars;
    }
    {
        let ApplicationEnvVar_ = None::<ApplicationEnvVar>.unwrap();
        let _: String = ApplicationEnvVar_.0;
        let _: bool = ApplicationEnvVar_.1;
    }
    match None::<ApplicationMessage>.unwrap() {
        ApplicationMessage::DisplayMessage(field0) => {
            let _: String = field0;
        }
        ApplicationMessage::RenderPixel { x, y } => {
            let _: i32 = x;
            let _: i32 = y;
        }
        ApplicationMessage::Exit => {}
    }
    match None::<ApplicationMode>.unwrap() {
        ApplicationMode::Standalone => {}
        ApplicationMode::Embedded => {}
    }
    {
        let ApplicationSettings = None::<ApplicationSettings>.unwrap();
        let _: String = ApplicationSettings.name;
        let _: String = ApplicationSettings.version;
        let _: ApplicationMode = ApplicationSettings.mode;
        let _: Box<ApplicationEnv> = ApplicationSettings.env;
    }
};
// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

impl Wire2Api<String> for String {
    fn wire2api(self) -> String {
        let vec: Vec<u8> = self.wire2api();
        String::from_utf8_lossy(&vec).into_owned()
    }
}
impl Wire2Api<Vec<String>> for Box<[JsString]> {
    fn wire2api(self) -> Vec<String> {
        let vec = unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(Wire2Api::wire2api).collect()
    }
}
impl Wire2Api<ZeroCopyBuffer<Vec<u8>>> for Box<[u8]> {
    fn wire2api(self) -> ZeroCopyBuffer<Vec<u8>> {
        ZeroCopyBuffer(self.wire2api())
    }
}
impl Wire2Api<ApplicationEnv> for Box<[JsValue]> {
    fn wire2api(self) -> ApplicationEnv {
        ApplicationEnv {
            vars: self.vars.wire2api(),
        }
    }
}
impl Wire2Api<ApplicationEnvVar> for Box<[JsValue]> {
    fn wire2api(self) -> ApplicationEnvVar {
        ApplicationEnvVar(self.field0.wire2api(), self.field1.wire2api())
    }
}
impl Wire2Api<ApplicationMode> for i32 {
    fn wire2api(self) -> ApplicationMode {
        match self {
            0 => ApplicationMode::Standalone,
            1 => ApplicationMode::Embedded,
            _ => unreachable!("Invalid variant for ApplicationMode: {}", self),
        }
    }
}
impl Wire2Api<ApplicationSettings> for Box<[JsValue]> {
    fn wire2api(self) -> ApplicationSettings {
        ApplicationSettings {
            name: self.name.wire2api(),
            version: self.version.wire2api(),
            mode: self.mode.wire2api(),
            env: self.env.wire2api(),
        }
    }
}
impl Wire2Api<Attribute> for Box<[JsValue]> {
    fn wire2api(self) -> Attribute {
        Attribute {
            key: self.key.wire2api(),
            value: self.value.wire2api(),
        }
    }
}
impl Wire2Api<bool> for bool {
    fn wire2api(self) -> bool {
        self
    }
}

impl Wire2Api<bool> for *mut usize /* bool */ {
    fn wire2api(self) -> bool {
        unsafe { *support::box_from_leak_ptr(self) }
    }
}

impl Wire2Api<f64> for *mut usize /* f64 */ {
    fn wire2api(self) -> f64 {
        unsafe { *support::box_from_leak_ptr(self) }
    }
}
impl Wire2Api<i32> for *mut usize /* i32 */ {
    fn wire2api(self) -> i32 {
        unsafe { *support::box_from_leak_ptr(self) }
    }
}
impl Wire2Api<i64> for *mut usize /* i64 */ {
    fn wire2api(self) -> i64 {
        unsafe { *support::box_from_leak_ptr(self) }
    }
}

impl Wire2Api<Box<bool>> for *mut usize /* bool */ {
    fn wire2api(self) -> Box<bool> {
        unsafe { support::box_from_leak_ptr(self) }
    }
}

impl Wire2Api<Box<f64>> for *mut usize /* f64 */ {
    fn wire2api(self) -> Box<f64> {
        unsafe { support::box_from_leak_ptr(self) }
    }
}
impl Wire2Api<Box<i32>> for *mut usize /* i32 */ {
    fn wire2api(self) -> Box<i32> {
        unsafe { support::box_from_leak_ptr(self) }
    }
}
impl Wire2Api<Box<i64>> for *mut usize /* i64 */ {
    fn wire2api(self) -> Box<i64> {
        unsafe { support::box_from_leak_ptr(self) }
    }
}
impl Wire2Api<Box<i8>> for *mut usize /* i8 */ {
    fn wire2api(self) -> Box<i8> {
        unsafe { support::box_from_leak_ptr(self) }
    }
}

impl Wire2Api<Box<u8>> for *mut usize /* u8 */ {
    fn wire2api(self) -> Box<u8> {
        unsafe { support::box_from_leak_ptr(self) }
    }
}
impl Wire2Api<Box<Weekdays>> for *mut usize /* i32 */ {
    fn wire2api(self) -> Box<Weekdays> {
        let wrap = unsafe { support::box_from_leak_ptr(self) };
        Wire2Api::<Weekdays>::wire2api(*wrap).into()
    }
}
impl Wire2Api<ConcatenateWith> for Box<[JsValue]> {
    fn wire2api(self) -> ConcatenateWith {
        ConcatenateWith {
            a: self.a.wire2api(),
        }
    }
}
impl Wire2Api<Customized> for Box<[JsValue]> {
    fn wire2api(self) -> Customized {
        Customized {
            final_field: self.final_field.wire2api(),
            non_final_field: self.non_final_field.wire2api(),
        }
    }
}
impl Wire2Api<ExoticOptionals> for Box<[JsValue]> {
    fn wire2api(self) -> ExoticOptionals {
        ExoticOptionals {
            int32: self.int32.wire2api(),
            int64: self.int64.wire2api(),
            float64: self.float64.wire2api(),
            boolean: self.boolean.wire2api(),
            zerocopy: self.zerocopy.wire2api(),
            int8list: self.int8list.wire2api(),
            uint8list: self.uint8list.wire2api(),
            int32list: self.int32list.wire2api(),
            int64list: self.int64list.wire2api(),
            float32list: self.float32list.wire2api(),
            float64list: self.float64list.wire2api(),
            attributes: self.attributes.wire2api(),
            attributes_nullable: self.attributes_nullable.wire2api(),
            nullable_attributes: self.nullable_attributes.wire2api(),
            newtypeint: self.newtypeint.wire2api(),
        }
    }
}
impl Wire2Api<f32> for f32 {
    fn wire2api(self) -> f32 {
        self
    }
}
impl Wire2Api<f64> for f64 {
    fn wire2api(self) -> f64 {
        self
    }
}
impl Wire2Api<Vec<f32>> for Box<[f32]> {
    fn wire2api(self) -> Vec<f32> {
        unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl Wire2Api<Vec<f64>> for Box<[f64]> {
    fn wire2api(self) -> Vec<f64> {
        unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}
impl Wire2Api<i64> for i64 {
    fn wire2api(self) -> i64 {
        self
    }
}
impl Wire2Api<i8> for i8 {
    fn wire2api(self) -> i8 {
        self
    }
}
impl Wire2Api<Vec<i32>> for Box<[i32]> {
    fn wire2api(self) -> Vec<i32> {
        unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl Wire2Api<Vec<i64>> for Box<[i64]> {
    fn wire2api(self) -> Vec<i64> {
        unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl Wire2Api<Vec<i8>> for Box<[i8]> {
    fn wire2api(self) -> Vec<i8> {
        unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl Wire2Api<KitchenSink> for Box<[JsValue]> {
    fn wire2api(self) -> KitchenSink {
        match self.tag {
            0 => KitchenSink::Empty,
            1 => unsafe {
                let ans = support::box_from_leak_ptr(self.kind);
                let ans = support::box_from_leak_ptr(ans.Primitives);
                KitchenSink::Primitives {
                    int32: ans.int32.wire2api(),
                    float64: ans.float64.wire2api(),
                    boolean: ans.boolean.wire2api(),
                }
            },
            2 => unsafe {
                let ans = support::box_from_leak_ptr(self.kind);
                let ans = support::box_from_leak_ptr(ans.Nested);
                KitchenSink::Nested(ans.field0.wire2api(), ans.field1.wire2api())
            },
            3 => unsafe {
                let ans = support::box_from_leak_ptr(self.kind);
                let ans = support::box_from_leak_ptr(ans.Optional);
                KitchenSink::Optional(ans.field0.wire2api(), ans.field1.wire2api())
            },
            4 => unsafe {
                let ans = support::box_from_leak_ptr(self.kind);
                let ans = support::box_from_leak_ptr(ans.Buffer);
                KitchenSink::Buffer(ans.field0.wire2api())
            },
            5 => unsafe {
                let ans = support::box_from_leak_ptr(self.kind);
                let ans = support::box_from_leak_ptr(ans.Enums);
                KitchenSink::Enums(ans.field0.wire2api())
            },
            _ => unreachable!(),
        }
    }
}
impl Wire2Api<Vec<ApplicationEnvVar>> for Box<[JsValue]> {
    fn wire2api(self) -> Vec<ApplicationEnvVar> {
        let vec = unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(Wire2Api::wire2api).collect()
    }
}
impl Wire2Api<Vec<Attribute>> for Box<[JsValue]> {
    fn wire2api(self) -> Vec<Attribute> {
        let vec = unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(Wire2Api::wire2api).collect()
    }
}
impl Wire2Api<Vec<MySize>> for Box<[JsValue]> {
    fn wire2api(self) -> Vec<MySize> {
        let vec = unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(Wire2Api::wire2api).collect()
    }
}
impl Wire2Api<Vec<MyTreeNode>> for Box<[JsValue]> {
    fn wire2api(self) -> Vec<MyTreeNode> {
        let vec = unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(Wire2Api::wire2api).collect()
    }
}
impl Wire2Api<Vec<Option<Attribute>>> for Box<[JsValue]> {
    fn wire2api(self) -> Vec<Option<Attribute>> {
        let vec = unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(Wire2Api::wire2api).collect()
    }
}
impl Wire2Api<MyEnum> for i32 {
    fn wire2api(self) -> MyEnum {
        match self {
            0 => MyEnum::False,
            1 => MyEnum::True,
            _ => unreachable!("Invalid variant for MyEnum: {}", self),
        }
    }
}
impl Wire2Api<MySize> for Box<[JsValue]> {
    fn wire2api(self) -> MySize {
        MySize {
            width: self.width.wire2api(),
            height: self.height.wire2api(),
        }
    }
}
impl Wire2Api<MyStruct> for Box<[JsValue]> {
    fn wire2api(self) -> MyStruct {
        MyStruct {
            content: self.content.wire2api(),
        }
    }
}
impl Wire2Api<MyTreeNode> for Box<[JsValue]> {
    fn wire2api(self) -> MyTreeNode {
        MyTreeNode {
            value_i32: self.value_i32.wire2api(),
            value_vec_u8: self.value_vec_u8.wire2api(),
            value_boolean: self.value_boolean.wire2api(),
            children: self.children.wire2api(),
        }
    }
}
impl Wire2Api<NewTypeInt> for Box<[JsValue]> {
    fn wire2api(self) -> NewTypeInt {
        NewTypeInt(self.field0.wire2api())
    }
}
impl Wire2Api<Note> for Box<[JsValue]> {
    fn wire2api(self) -> Note {
        Note {
            day: self.day.wire2api(),
            body: self.body.wire2api(),
        }
    }
}

impl Wire2Api<SumWith> for Box<[JsValue]> {
    fn wire2api(self) -> SumWith {
        SumWith {
            x: self.x.wire2api(),
        }
    }
}
impl Wire2Api<u32> for u32 {
    fn wire2api(self) -> u32 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}
impl Wire2Api<Vec<u8>> for Box<[u8]> {
    fn wire2api(self) -> Vec<u8> {
        unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl Wire2Api<UserId> for Box<[JsValue]> {
    fn wire2api(self) -> UserId {
        UserId {
            value: self.value.wire2api(),
        }
    }
}
impl Wire2Api<usize> for usize {
    fn wire2api(self) -> usize {
        self
    }
}
impl Wire2Api<Weekdays> for i32 {
    fn wire2api(self) -> Weekdays {
        match self {
            0 => Weekdays::Monday,
            1 => Weekdays::Tuesday,
            2 => Weekdays::Wednesday,
            3 => Weekdays::Thursday,
            4 => Weekdays::Friday,
            5 => Weekdays::Saturday,
            6 => Weekdays::Sunday,
            _ => unreachable!("Invalid variant for Weekdays: {}", self),
        }
    }
}
// Section: impl IntoDart

impl support::IntoDart for mirror_ApplicationEnv {
    fn into_dart(self) -> support::DartCObject {
        vec![self
            .0
            .vars
            .into_iter()
            .map(|v| mirror_ApplicationEnvVar(v))
            .collect::<Vec<_>>()
            .into_dart()]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_ApplicationEnv {}

impl support::IntoDart for mirror_ApplicationEnvVar {
    fn into_dart(self) -> support::DartCObject {
        vec![self.0 .0.into_dart(), self.0 .1.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_ApplicationEnvVar {}

impl support::IntoDart for mirror_ApplicationMessage {
    fn into_dart(self) -> support::DartCObject {
        match self.0 {
            ApplicationMessage::DisplayMessage(field0) => vec![0.into_dart(), field0.into_dart()],
            ApplicationMessage::RenderPixel { x, y } => {
                vec![1.into_dart(), x.into_dart(), y.into_dart()]
            }
            ApplicationMessage::Exit => vec![2.into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_ApplicationMessage {}
impl support::IntoDart for mirror_ApplicationMode {
    fn into_dart(self) -> support::DartCObject {
        match self.0 {
            ApplicationMode::Standalone => 0,
            ApplicationMode::Embedded => 1,
        }
        .into_dart()
    }
}
impl support::IntoDart for mirror_ApplicationSettings {
    fn into_dart(self) -> support::DartCObject {
        vec![
            self.0.name.into_dart(),
            self.0.version.into_dart(),
            mirror_ApplicationMode(self.0.mode).into_dart(),
            mirror_ApplicationEnv((*self.0.env)).into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_ApplicationSettings {}

impl support::IntoDart for Attribute {
    fn into_dart(self) -> support::DartCObject {
        vec![self.key.into_dart(), self.value.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Attribute {}

impl support::IntoDart for ConcatenateWith {
    fn into_dart(self) -> support::DartCObject {
        vec![self.a.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ConcatenateWith {}

impl support::IntoDart for Element {
    fn into_dart(self) -> support::DartCObject {
        vec![
            self.tag.into_dart(),
            self.text.into_dart(),
            self.attributes.into_dart(),
            self.children.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Element {}

impl support::IntoDart for Event {
    fn into_dart(self) -> support::DartCObject {
        vec![self.address.into_dart(), self.payload.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Event {}

impl support::IntoDart for ExoticOptionals {
    fn into_dart(self) -> support::DartCObject {
        vec![
            self.int32.into_dart(),
            self.int64.into_dart(),
            self.float64.into_dart(),
            self.boolean.into_dart(),
            self.zerocopy.into_dart(),
            self.int8list.into_dart(),
            self.uint8list.into_dart(),
            self.int32list.into_dart(),
            self.int64list.into_dart(),
            self.float32list.into_dart(),
            self.float64list.into_dart(),
            self.attributes.into_dart(),
            self.attributes_nullable.into_dart(),
            self.nullable_attributes.into_dart(),
            self.newtypeint.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ExoticOptionals {}

impl support::IntoDart for KitchenSink {
    fn into_dart(self) -> support::DartCObject {
        match self {
            Self::Empty => vec![0.into_dart()],
            Self::Primitives {
                int32,
                float64,
                boolean,
            } => vec![
                1.into_dart(),
                int32.into_dart(),
                float64.into_dart(),
                boolean.into_dart(),
            ],
            Self::Nested(field0, field1) => {
                vec![2.into_dart(), field0.into_dart(), field1.into_dart()]
            }
            Self::Optional(field0, field1) => {
                vec![3.into_dart(), field0.into_dart(), field1.into_dart()]
            }
            Self::Buffer(field0) => vec![4.into_dart(), field0.into_dart()],
            Self::Enums(field0) => vec![5.into_dart(), field0.into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for KitchenSink {}

impl support::IntoDart for Log {
    fn into_dart(self) -> support::DartCObject {
        vec![self.key.into_dart(), self.value.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Log {}

impl support::IntoDart for Log2 {
    fn into_dart(self) -> support::DartCObject {
        vec![self.key.into_dart(), self.value.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Log2 {}

impl support::IntoDart for MySize {
    fn into_dart(self) -> support::DartCObject {
        vec![self.width.into_dart(), self.height.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MySize {}

impl support::IntoDart for MyStreamEntry {
    fn into_dart(self) -> support::DartCObject {
        vec![self.hello.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MyStreamEntry {}

impl support::IntoDart for MyTreeNode {
    fn into_dart(self) -> support::DartCObject {
        vec![
            self.value_i32.into_dart(),
            self.value_vec_u8.into_dart(),
            self.value_boolean.into_dart(),
            self.children.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MyTreeNode {}

impl support::IntoDart for NewTypeInt {
    fn into_dart(self) -> support::DartCObject {
        vec![self.0.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for NewTypeInt {}

impl support::IntoDart for Point {
    fn into_dart(self) -> support::DartCObject {
        vec![self.x.into_dart(), self.y.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Point {}

impl support::IntoDart for UserId {
    fn into_dart(self) -> support::DartCObject {
        vec![self.value.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for UserId {}

impl support::IntoDart for VecOfPrimitivePack {
    fn into_dart(self) -> support::DartCObject {
        vec![
            self.int8list.into_dart(),
            self.uint8list.into_dart(),
            self.int16list.into_dart(),
            self.uint16list.into_dart(),
            self.uint32list.into_dart(),
            self.int32list.into_dart(),
            self.uint64list.into_dart(),
            self.int64list.into_dart(),
            self.float32list.into_dart(),
            self.float64list.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for VecOfPrimitivePack {}

impl support::IntoDart for Weekdays {
    fn into_dart(self) -> support::DartCObject {
        match self {
            Self::Monday => 0,
            Self::Tuesday => 1,
            Self::Wednesday => 2,
            Self::Thursday => 3,
            Self::Friday => 4,
            Self::Saturday => 5,
            Self::Sunday => 6,
        }
        .into_dart()
    }
}
impl support::IntoDart for ZeroCopyVecOfPrimitivePack {
    fn into_dart(self) -> support::DartCObject {
        vec![
            self.int8list.into_dart(),
            self.uint8list.into_dart(),
            self.int16list.into_dart(),
            self.uint16list.into_dart(),
            self.uint32list.into_dart(),
            self.int32list.into_dart(),
            self.uint64list.into_dart(),
            self.int64list.into_dart(),
            self.float32list.into_dart(),
            self.float64list.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ZeroCopyVecOfPrimitivePack {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}
// Section: sync execution mode utility

#[no_mangle]
pub extern "C" fn free_WireSyncReturnStruct(val: support::WireSyncReturnStruct) {
    unsafe {
        let _ = support::vec_from_leak_ptr(val.ptr, val.len);
    }
}
