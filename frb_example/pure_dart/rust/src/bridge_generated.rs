#![allow(
    non_camel_case_types,
    clippy::redundant_closure,
    clippy::useless_conversion
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

use crate::api::*;
use flutter_rust_bridge::*;

// Section: wire functions

#[no_mangle]
pub extern "C" fn wire_simple_adder(port: i64, a: i32, b: i32) {
    let api_a = a.wire2api();
    let api_b = b.wire2api();
    support::wrap_wire_func(
        &*FLUTTER_RUST_BRIDGE_EXECUTOR,
        "simple_adder",
        port,
        move || simple_adder(api_a, api_b),
    );
}

#[no_mangle]
pub extern "C" fn wire_primitive_types(
    port: i64,
    my_i32: i32,
    my_i64: i64,
    my_f64: f64,
    my_bool: bool,
) {
    let api_my_i32 = my_i32.wire2api();
    let api_my_i64 = my_i64.wire2api();
    let api_my_f64 = my_f64.wire2api();
    let api_my_bool = my_bool.wire2api();
    support::wrap_wire_func(
        &*FLUTTER_RUST_BRIDGE_EXECUTOR,
        "primitive_types",
        port,
        move || primitive_types(api_my_i32, api_my_i64, api_my_f64, api_my_bool),
    );
}

#[no_mangle]
pub extern "C" fn wire_handle_string(port: i64, s: *mut wire_uint_8_list) {
    let api_s = s.wire2api();
    support::wrap_wire_func(
        &*FLUTTER_RUST_BRIDGE_EXECUTOR,
        "handle_string",
        port,
        move || handle_string(api_s),
    );
}

#[no_mangle]
pub extern "C" fn wire_handle_vec_u8(port: i64, v: *mut wire_uint_8_list) {
    let api_v = v.wire2api();
    support::wrap_wire_func(
        &*FLUTTER_RUST_BRIDGE_EXECUTOR,
        "handle_vec_u8",
        port,
        move || handle_vec_u8(api_v),
    );
}

#[no_mangle]
pub extern "C" fn wire_handle_zero_copy_result(port: i64, n: i32) {
    let api_n = n.wire2api();
    support::wrap_wire_func(
        &*FLUTTER_RUST_BRIDGE_EXECUTOR,
        "handle_zero_copy_result",
        port,
        move || handle_zero_copy_result(api_n),
    );
}

#[no_mangle]
pub extern "C" fn wire_handle_struct(port: i64, arg: *mut wire_MySize, boxed: *mut wire_MySize) {
    let api_arg = arg.wire2api();
    let api_boxed = boxed.wire2api();
    support::wrap_wire_func(
        &*FLUTTER_RUST_BRIDGE_EXECUTOR,
        "handle_struct",
        port,
        move || handle_struct(api_arg, api_boxed),
    );
}

#[no_mangle]
pub extern "C" fn wire_handle_newtype(port: i64, arg: *mut wire_NewTypeInt) {
    let api_arg = arg.wire2api();
    support::wrap_wire_func(
        &*FLUTTER_RUST_BRIDGE_EXECUTOR,
        "handle_newtype",
        port,
        move || handle_newtype(api_arg),
    );
}

#[no_mangle]
pub extern "C" fn wire_handle_list_of_struct(port: i64, l: *mut wire_list_my_size) {
    let api_l = l.wire2api();
    support::wrap_wire_func(
        &*FLUTTER_RUST_BRIDGE_EXECUTOR,
        "handle_list_of_struct",
        port,
        move || handle_list_of_struct(api_l),
    );
}

#[no_mangle]
pub extern "C" fn wire_handle_complex_struct(port: i64, s: *mut wire_MyTreeNode) {
    let api_s = s.wire2api();
    support::wrap_wire_func(
        &*FLUTTER_RUST_BRIDGE_EXECUTOR,
        "handle_complex_struct",
        port,
        move || handle_complex_struct(api_s),
    );
}

#[no_mangle]
pub extern "C" fn wire_return_err(port: i64) {
    support::wrap_wire_func(
        &*FLUTTER_RUST_BRIDGE_EXECUTOR,
        "return_err",
        port,
        move || return_err(),
    );
}

#[no_mangle]
pub extern "C" fn wire_return_panic(port: i64) {
    support::wrap_wire_func(
        &*FLUTTER_RUST_BRIDGE_EXECUTOR,
        "return_panic",
        port,
        move || return_panic(),
    );
}

#[no_mangle]
pub extern "C" fn wire_handle_optional_return(port: i64, left: f64, right: f64) {
    let api_left = left.wire2api();
    let api_right = right.wire2api();
    support::wrap_wire_func(
        &*FLUTTER_RUST_BRIDGE_EXECUTOR,
        "handle_optional_return",
        port,
        move || handle_optional_return(api_left, api_right),
    );
}

#[no_mangle]
pub extern "C" fn wire_handle_optional_struct(port: i64, document: *mut wire_uint_8_list) {
    let api_document = document.wire2api();
    support::wrap_wire_func(
        &*FLUTTER_RUST_BRIDGE_EXECUTOR,
        "handle_optional_struct",
        port,
        move || handle_optional_struct(api_document),
    );
}

#[no_mangle]
pub extern "C" fn wire_increment(port: i64, opt: *mut wire_ExoticOptionals) {
    let api_opt = opt.wire2api();
    support::wrap_wire_func(
        &*FLUTTER_RUST_BRIDGE_EXECUTOR,
        "increment",
        port,
        move || increment(api_opt),
    );
}

#[no_mangle]
pub extern "C" fn wire_handle_boxed_optional(port: i64, opt: *mut f64) {
    let api_opt = opt.wire2api();
    support::wrap_wire_func(
        &*FLUTTER_RUST_BRIDGE_EXECUTOR,
        "handle_boxed_optional",
        port,
        move || handle_boxed_optional(api_opt),
    );
}

// Section: wire structs

#[repr(C)]
#[derive(Clone)]
pub struct wire_uint_8_list {
    ptr: *mut u8,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_MySize {
    width: i32,
    height: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_NewTypeInt {
    field0: i64,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_list_my_size {
    ptr: *mut wire_MySize,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_MyTreeNode {
    value_i32: i32,
    value_vec_u8: *mut wire_uint_8_list,
    children: *mut wire_list_my_tree_node,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_list_my_tree_node {
    ptr: *mut wire_MyTreeNode,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_Element {
    tag: *mut wire_uint_8_list,
    text: *mut wire_uint_8_list,
    attributes: *mut wire_list_attribute,
    children: *mut wire_list_element,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_list_attribute {
    ptr: *mut wire_Attribute,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_Attribute {
    key: *mut wire_uint_8_list,
    value: *mut wire_uint_8_list,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_list_element {
    ptr: *mut wire_Element,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_ExoticOptionals {
    int32: *mut i32,
    int64: *mut i64,
    float64: *mut f64,
    boolean: *mut bool,
    zerocopy: *mut wire_uint_8_list,
    int8list: *mut wire_int_8_list,
    uint8list: *mut wire_uint_8_list,
    float64list: *mut wire_float_64_list,
    attributes: *mut wire_list_attribute,
    attributes_nullable: *mut wire_list_Option_attribute,
    nullable_attributes: *mut wire_list_Option_attribute,
    newtypeint: *mut wire_NewTypeInt,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_int_8_list {
    ptr: *mut i8,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_float_64_list {
    ptr: *mut f64,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_list_Option_attribute {
    ptr: *mut wire_Attribute,
    len: i32,
}

// Section: allocate functions

#[no_mangle]
pub extern "C" fn new_uint_8_list(len: i32) -> *mut wire_uint_8_list {
    let ans = wire_uint_8_list {
        ptr: support::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    support::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn new_box_autoadd_my_size() -> *mut wire_MySize {
    support::new_leak_box_ptr(wire_MySize::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn new_box_my_size() -> *mut wire_MySize {
    support::new_leak_box_ptr(wire_MySize::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn new_box_autoadd_new_type_int() -> *mut wire_NewTypeInt {
    support::new_leak_box_ptr(wire_NewTypeInt::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn new_list_my_size(len: i32) -> *mut wire_list_my_size {
    let wrap = wire_list_my_size {
        ptr: support::new_leak_vec_ptr(wire_MySize::new_with_null_ptr(), len),
        len,
    };
    support::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn new_box_autoadd_my_tree_node() -> *mut wire_MyTreeNode {
    support::new_leak_box_ptr(wire_MyTreeNode::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn new_list_my_tree_node(len: i32) -> *mut wire_list_my_tree_node {
    let wrap = wire_list_my_tree_node {
        ptr: support::new_leak_vec_ptr(wire_MyTreeNode::new_with_null_ptr(), len),
        len,
    };
    support::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn new_box_autoadd_f64(value: f64) -> *mut f64 {
    support::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn new_box_autoadd_element() -> *mut wire_Element {
    support::new_leak_box_ptr(wire_Element::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn new_list_attribute(len: i32) -> *mut wire_list_attribute {
    let wrap = wire_list_attribute {
        ptr: support::new_leak_vec_ptr(wire_Attribute::new_with_null_ptr(), len),
        len,
    };
    support::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn new_list_element(len: i32) -> *mut wire_list_element {
    let wrap = wire_list_element {
        ptr: support::new_leak_vec_ptr(wire_Element::new_with_null_ptr(), len),
        len,
    };
    support::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn new_box_autoadd_exotic_optionals() -> *mut wire_ExoticOptionals {
    support::new_leak_box_ptr(wire_ExoticOptionals::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn new_box_autoadd_i32(value: i32) -> *mut i32 {
    support::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn new_box_autoadd_i64(value: i64) -> *mut i64 {
    support::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn new_box_autoadd_bool(value: bool) -> *mut bool {
    support::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn new_int_8_list(len: i32) -> *mut wire_int_8_list {
    let ans = wire_int_8_list {
        ptr: support::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    support::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn new_float_64_list(len: i32) -> *mut wire_float_64_list {
    let ans = wire_float_64_list {
        ptr: support::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    support::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn new_list_Option_attribute(len: i32) -> *mut wire_list_Option_attribute {
    let wrap = wire_list_Option_attribute {
        ptr: support::new_leak_vec_ptr(wire_Attribute::new_with_null_ptr(), len),
        len,
    };
    support::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn new_box_autoadd_attribute() -> *mut wire_Attribute {
    support::new_leak_box_ptr(wire_Attribute::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn new_box_f64(value: f64) -> *mut f64 {
    support::new_leak_box_ptr(value)
}

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}

impl Wire2Api<i64> for i64 {
    fn wire2api(self) -> i64 {
        self
    }
}

impl Wire2Api<f64> for f64 {
    fn wire2api(self) -> f64 {
        self
    }
}

impl Wire2Api<bool> for bool {
    fn wire2api(self) -> bool {
        self
    }
}

impl Wire2Api<String> for *mut wire_uint_8_list {
    fn wire2api(self) -> String {
        let vec: Vec<u8> = self.wire2api();
        String::from_utf8_lossy(&vec).into_owned()
    }
}

impl Wire2Api<Vec<u8>> for *mut wire_uint_8_list {
    fn wire2api(self) -> Vec<u8> {
        unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}

impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

impl Wire2Api<ZeroCopyBuffer<Vec<u8>>> for *mut wire_uint_8_list {
    fn wire2api(self) -> ZeroCopyBuffer<Vec<u8>> {
        ZeroCopyBuffer(self.wire2api())
    }
}

impl Wire2Api<MySize> for *mut wire_MySize {
    fn wire2api(self) -> MySize {
        let wrap = unsafe { support::box_from_leak_ptr(self) };
        (*wrap).wire2api().into()
    }
}

impl Wire2Api<MySize> for wire_MySize {
    fn wire2api(self) -> MySize {
        MySize {
            width: self.width.wire2api(),
            height: self.height.wire2api(),
        }
    }
}

impl Wire2Api<Box<MySize>> for *mut wire_MySize {
    fn wire2api(self) -> Box<MySize> {
        let wrap = unsafe { support::box_from_leak_ptr(self) };
        (*wrap).wire2api().into()
    }
}

impl Wire2Api<NewTypeInt> for *mut wire_NewTypeInt {
    fn wire2api(self) -> NewTypeInt {
        let wrap = unsafe { support::box_from_leak_ptr(self) };
        (*wrap).wire2api().into()
    }
}

impl Wire2Api<NewTypeInt> for wire_NewTypeInt {
    fn wire2api(self) -> NewTypeInt {
        NewTypeInt(self.field0.wire2api())
    }
}

impl Wire2Api<Vec<MySize>> for *mut wire_list_my_size {
    fn wire2api(self) -> Vec<MySize> {
        let vec = unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter()
            .map(|x| <MySize>::from(x.wire2api()))
            .collect()
    }
}

impl Wire2Api<MyTreeNode> for *mut wire_MyTreeNode {
    fn wire2api(self) -> MyTreeNode {
        let wrap = unsafe { support::box_from_leak_ptr(self) };
        (*wrap).wire2api().into()
    }
}

impl Wire2Api<MyTreeNode> for wire_MyTreeNode {
    fn wire2api(self) -> MyTreeNode {
        MyTreeNode {
            value_i32: self.value_i32.wire2api(),
            value_vec_u8: self.value_vec_u8.wire2api(),
            children: self.children.wire2api(),
        }
    }
}

impl Wire2Api<Vec<MyTreeNode>> for *mut wire_list_my_tree_node {
    fn wire2api(self) -> Vec<MyTreeNode> {
        let vec = unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter()
            .map(|x| <MyTreeNode>::from(x.wire2api()))
            .collect()
    }
}

impl Wire2Api<Option<f64>> for *mut f64 {
    fn wire2api(self) -> Option<f64> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

impl Wire2Api<f64> for *mut f64 {
    fn wire2api(self) -> f64 {
        let wrap = unsafe { support::box_from_leak_ptr(self) };
        (*wrap).wire2api().into()
    }
}

impl Wire2Api<Option<String>> for *mut wire_uint_8_list {
    fn wire2api(self) -> Option<String> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

impl Wire2Api<Option<Element>> for *mut wire_Element {
    fn wire2api(self) -> Option<Element> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

impl Wire2Api<Element> for *mut wire_Element {
    fn wire2api(self) -> Element {
        let wrap = unsafe { support::box_from_leak_ptr(self) };
        (*wrap).wire2api().into()
    }
}

impl Wire2Api<Element> for wire_Element {
    fn wire2api(self) -> Element {
        Element {
            tag: self.tag.wire2api(),
            text: self.text.wire2api(),
            attributes: self.attributes.wire2api(),
            children: self.children.wire2api(),
        }
    }
}

impl Wire2Api<Option<Vec<Attribute>>> for *mut wire_list_attribute {
    fn wire2api(self) -> Option<Vec<Attribute>> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

impl Wire2Api<Vec<Attribute>> for *mut wire_list_attribute {
    fn wire2api(self) -> Vec<Attribute> {
        let vec = unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter()
            .map(|x| <Attribute>::from(x.wire2api()))
            .collect()
    }
}

impl Wire2Api<Attribute> for wire_Attribute {
    fn wire2api(self) -> Attribute {
        Attribute {
            key: self.key.wire2api(),
            value: self.value.wire2api(),
        }
    }
}

impl Wire2Api<Option<Vec<Element>>> for *mut wire_list_element {
    fn wire2api(self) -> Option<Vec<Element>> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

impl Wire2Api<Vec<Element>> for *mut wire_list_element {
    fn wire2api(self) -> Vec<Element> {
        let vec = unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter()
            .map(|x| <Element>::from(x.wire2api()))
            .collect()
    }
}

impl Wire2Api<Option<ExoticOptionals>> for *mut wire_ExoticOptionals {
    fn wire2api(self) -> Option<ExoticOptionals> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

impl Wire2Api<ExoticOptionals> for *mut wire_ExoticOptionals {
    fn wire2api(self) -> ExoticOptionals {
        let wrap = unsafe { support::box_from_leak_ptr(self) };
        (*wrap).wire2api().into()
    }
}

impl Wire2Api<ExoticOptionals> for wire_ExoticOptionals {
    fn wire2api(self) -> ExoticOptionals {
        ExoticOptionals {
            int32: self.int32.wire2api(),
            int64: self.int64.wire2api(),
            float64: self.float64.wire2api(),
            boolean: self.boolean.wire2api(),
            zerocopy: self.zerocopy.wire2api(),
            int8list: self.int8list.wire2api(),
            uint8list: self.uint8list.wire2api(),
            float64list: self.float64list.wire2api(),
            attributes: self.attributes.wire2api(),
            attributes_nullable: self.attributes_nullable.wire2api(),
            nullable_attributes: self.nullable_attributes.wire2api(),
            newtypeint: self.newtypeint.wire2api(),
        }
    }
}

impl Wire2Api<Option<i32>> for *mut i32 {
    fn wire2api(self) -> Option<i32> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

impl Wire2Api<i32> for *mut i32 {
    fn wire2api(self) -> i32 {
        let wrap = unsafe { support::box_from_leak_ptr(self) };
        (*wrap).wire2api().into()
    }
}

impl Wire2Api<Option<i64>> for *mut i64 {
    fn wire2api(self) -> Option<i64> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

impl Wire2Api<i64> for *mut i64 {
    fn wire2api(self) -> i64 {
        let wrap = unsafe { support::box_from_leak_ptr(self) };
        (*wrap).wire2api().into()
    }
}

impl Wire2Api<Option<bool>> for *mut bool {
    fn wire2api(self) -> Option<bool> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

impl Wire2Api<bool> for *mut bool {
    fn wire2api(self) -> bool {
        let wrap = unsafe { support::box_from_leak_ptr(self) };
        (*wrap).wire2api().into()
    }
}

impl Wire2Api<Option<ZeroCopyBuffer<Vec<u8>>>> for *mut wire_uint_8_list {
    fn wire2api(self) -> Option<ZeroCopyBuffer<Vec<u8>>> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

impl Wire2Api<Option<Vec<i8>>> for *mut wire_int_8_list {
    fn wire2api(self) -> Option<Vec<i8>> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

impl Wire2Api<Vec<i8>> for *mut wire_int_8_list {
    fn wire2api(self) -> Vec<i8> {
        unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}

impl Wire2Api<i8> for i8 {
    fn wire2api(self) -> i8 {
        self
    }
}

impl Wire2Api<Option<Vec<u8>>> for *mut wire_uint_8_list {
    fn wire2api(self) -> Option<Vec<u8>> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

impl Wire2Api<Option<Vec<f64>>> for *mut wire_float_64_list {
    fn wire2api(self) -> Option<Vec<f64>> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

impl Wire2Api<Vec<f64>> for *mut wire_float_64_list {
    fn wire2api(self) -> Vec<f64> {
        unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}

impl Wire2Api<Vec<Option<Attribute>>> for *mut wire_list_Option_attribute {
    fn wire2api(self) -> Vec<Option<Attribute>> {
        let vec = unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter()
            .map(|x| <Option<Attribute>>::from(x.wire2api()))
            .collect()
    }
}

impl Wire2Api<Option<Attribute>> for *mut wire_Attribute {
    fn wire2api(self) -> Option<Attribute> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

impl Wire2Api<Attribute> for *mut wire_Attribute {
    fn wire2api(self) -> Attribute {
        let wrap = unsafe { support::box_from_leak_ptr(self) };
        (*wrap).wire2api().into()
    }
}

impl Wire2Api<Option<Vec<Option<Attribute>>>> for *mut wire_list_Option_attribute {
    fn wire2api(self) -> Option<Vec<Option<Attribute>>> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

impl Wire2Api<Option<NewTypeInt>> for *mut wire_NewTypeInt {
    fn wire2api(self) -> Option<NewTypeInt> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

impl Wire2Api<Option<Box<f64>>> for *mut f64 {
    fn wire2api(self) -> Option<Box<f64>> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

impl Wire2Api<Box<f64>> for *mut f64 {
    fn wire2api(self) -> Box<f64> {
        let wrap = unsafe { support::box_from_leak_ptr(self) };
        (*wrap).wire2api().into()
    }
}

// Section: impl NewWithNullPtr

pub trait NewWithNullPtr {
    fn new_with_null_ptr() -> Self;
}

impl NewWithNullPtr for wire_MySize {
    fn new_with_null_ptr() -> Self {
        Self {
            width: Default::default(),
            height: Default::default(),
        }
    }
}

impl NewWithNullPtr for wire_NewTypeInt {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: Default::default(),
        }
    }
}

impl NewWithNullPtr for wire_MyTreeNode {
    fn new_with_null_ptr() -> Self {
        Self {
            value_i32: Default::default(),
            value_vec_u8: std::ptr::null_mut(),
            children: std::ptr::null_mut(),
        }
    }
}

impl NewWithNullPtr for wire_Element {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: std::ptr::null_mut(),
            text: std::ptr::null_mut(),
            attributes: std::ptr::null_mut(),
            children: std::ptr::null_mut(),
        }
    }
}

impl NewWithNullPtr for wire_Attribute {
    fn new_with_null_ptr() -> Self {
        Self {
            key: std::ptr::null_mut(),
            value: std::ptr::null_mut(),
        }
    }
}

impl NewWithNullPtr for wire_ExoticOptionals {
    fn new_with_null_ptr() -> Self {
        Self {
            int32: std::ptr::null_mut(),
            int64: std::ptr::null_mut(),
            float64: std::ptr::null_mut(),
            boolean: std::ptr::null_mut(),
            zerocopy: std::ptr::null_mut(),
            int8list: std::ptr::null_mut(),
            uint8list: std::ptr::null_mut(),
            float64list: std::ptr::null_mut(),
            attributes: std::ptr::null_mut(),
            attributes_nullable: std::ptr::null_mut(),
            nullable_attributes: std::ptr::null_mut(),
            newtypeint: std::ptr::null_mut(),
        }
    }
}

// Section: impl IntoDart

impl support::IntoDart for MySize {
    fn into_dart(self) -> support::DartCObject {
        vec![self.width.into_dart(), self.height.into_dart()].into_dart()
    }
}

impl support::IntoDart for NewTypeInt {
    fn into_dart(self) -> support::DartCObject {
        vec![self.0.into_dart()].into_dart()
    }
}

impl support::IntoDart for MyTreeNode {
    fn into_dart(self) -> support::DartCObject {
        vec![
            self.value_i32.into_dart(),
            self.value_vec_u8.into_dart(),
            self.children.into_dart(),
        ]
        .into_dart()
    }
}

impl support::IntoDart for Element {
    fn into_dart(self) -> support::DartCObject {
        vec![
            self.tag.into_dart(),
            self.text.into_dart(),
            self.attributes.into_dart(),
            self.children.into_dart(),
        ]
        .into_dart()
    }
}

impl support::IntoDart for Attribute {
    fn into_dart(self) -> support::DartCObject {
        vec![self.key.into_dart(), self.value.into_dart()].into_dart()
    }
}

impl support::IntoDart for ExoticOptionals {
    fn into_dart(self) -> support::DartCObject {
        vec![
            self.int32.into_dart(),
            self.int64.into_dart(),
            self.float64.into_dart(),
            self.boolean.into_dart(),
            self.zerocopy.into_dart(),
            self.int8list.into_dart(),
            self.uint8list.into_dart(),
            self.float64list.into_dart(),
            self.attributes.into_dart(),
            self.attributes_nullable.into_dart(),
            self.nullable_attributes.into_dart(),
            self.newtypeint.into_dart(),
        ]
        .into_dart()
    }
}

// Section: executor
support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_EXECUTOR: support::DefaultExecutor = support::DefaultExecutor;
}
