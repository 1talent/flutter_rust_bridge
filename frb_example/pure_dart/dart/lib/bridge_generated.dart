// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas
import 'dart:convert';
import 'dart:typed_data';

import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'dart:ffi' as ffi;

abstract class FlutterRustBridgeExample extends FlutterRustBridgeBase<FlutterRustBridgeExampleWire> {
  factory FlutterRustBridgeExample(ffi.DynamicLibrary dylib) =>
      FlutterRustBridgeExampleImpl.raw(FlutterRustBridgeExampleWire(dylib));

  FlutterRustBridgeExample.raw(FlutterRustBridgeExampleWire inner) : super(inner);

  Future<int> simpleAdder({required int a, required int b, dynamic hint});

  Future<int> primitiveTypes(
      {required int myI32, required int myI64, required double myF64, required bool myBool, dynamic hint});

  Future<String> handleString({required String s, dynamic hint});

  Future<Uint8List> handleVecU8({required Uint8List v, dynamic hint});

  Future<Uint8List> handleZeroCopyResult({required int n, dynamic hint});

  Future<MySize> handleStruct({required MySize arg, required MySize boxed, dynamic hint});

  Future<NewTypeInt> handleNewtype({required NewTypeInt arg, dynamic hint});

  Future<List<MySize>> handleListOfStruct({required List<MySize> l, dynamic hint});

  Future<MyTreeNode> handleComplexStruct({required MyTreeNode s, dynamic hint});

  Stream<String> handleStream({required String arg, dynamic hint});

  Future<int> returnErr({dynamic hint});

  Future<int> returnPanic({dynamic hint});

  Future<double?> handleOptionalReturn({required double left, required double right, dynamic hint});

  Future<Element?> handleOptionalStruct({String? document, dynamic hint});

  Future<ExoticOptionals?> increment({ExoticOptionals? opt, dynamic hint});

  Future<double> handleBoxedOptional({double? opt, dynamic hint});
}

class MySize {
  final int width;
  final int height;

  MySize({
    required this.width,
    required this.height,
  });
}

class NewTypeInt {
  final int field0;

  NewTypeInt({
    required this.field0,
  });
}

class MyTreeNode {
  final int valueI32;
  final Uint8List valueVecU8;
  final List<MyTreeNode> children;

  MyTreeNode({
    required this.valueI32,
    required this.valueVecU8,
    required this.children,
  });
}

class Element {
  final String? tag;
  final String? text;
  final List<Attribute>? attributes;
  final List<Element>? children;

  Element({
    this.tag,
    this.text,
    this.attributes,
    this.children,
  });
}

class Attribute {
  final String key;
  final String value;

  Attribute({
    required this.key,
    required this.value,
  });
}

class ExoticOptionals {
  final int? int32;
  final int? int64;
  final double? float64;
  final bool? boolean;
  final Uint8List? zerocopy;
  final Int8List? int8List;
  final Uint8List? uint8List;
  final Float64List? float64List;
  final List<Attribute>? attributes;
  final List<Attribute?> attributesNullable;
  final List<Attribute?>? nullableAttributes;
  final NewTypeInt? newtypeint;

  ExoticOptionals({
    this.int32,
    this.int64,
    this.float64,
    this.boolean,
    this.zerocopy,
    this.int8List,
    this.uint8List,
    this.float64List,
    this.attributes,
    required this.attributesNullable,
    this.nullableAttributes,
    this.newtypeint,
  });
}

// ------------------------- Implementation Details -------------------------

/// Implementations for FlutterRustBridgeExample. Prefer using FlutterRustBridgeExample if possible; but this class allows more
/// flexible customizations (such as subclassing to create an initializer, a logger, or
/// a timer).
class FlutterRustBridgeExampleImpl extends FlutterRustBridgeExample {
  FlutterRustBridgeExampleImpl.raw(FlutterRustBridgeExampleWire inner) : super.raw(inner);

  Future<int> simpleAdder({required int a, required int b, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
      debugName: 'simple_adder',
      callFfi: (port) => inner.wire_simple_adder(port, _api2wire_i32(a), _api2wire_i32(b)),
      parseSuccessData: _wire2api_i32,
      hint: hint));

  Future<int> primitiveTypes(
          {required int myI32, required int myI64, required double myF64, required bool myBool, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
          debugName: 'primitive_types',
          callFfi: (port) => inner.wire_primitive_types(
              port, _api2wire_i32(myI32), _api2wire_i64(myI64), _api2wire_f64(myF64), _api2wire_bool(myBool)),
          parseSuccessData: _wire2api_i32,
          hint: hint));

  Future<String> handleString({required String s, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
      debugName: 'handle_string',
      callFfi: (port) => inner.wire_handle_string(port, _api2wire_String(s)),
      parseSuccessData: _wire2api_String,
      hint: hint));

  Future<Uint8List> handleVecU8({required Uint8List v, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
      debugName: 'handle_vec_u8',
      callFfi: (port) => inner.wire_handle_vec_u8(port, _api2wire_uint_8_list(v)),
      parseSuccessData: _wire2api_uint_8_list,
      hint: hint));

  Future<Uint8List> handleZeroCopyResult({required int n, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
      debugName: 'handle_zero_copy_result',
      callFfi: (port) => inner.wire_handle_zero_copy_result(port, _api2wire_i32(n)),
      parseSuccessData: _wire2api_ZeroCopyBuffer_Uint8List,
      hint: hint));

  Future<MySize> handleStruct({required MySize arg, required MySize boxed, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
          debugName: 'handle_struct',
          callFfi: (port) =>
              inner.wire_handle_struct(port, _api2wire_box_autoadd_my_size(arg), _api2wire_box_my_size(boxed)),
          parseSuccessData: _wire2api_my_size,
          hint: hint));

  Future<NewTypeInt> handleNewtype({required NewTypeInt arg, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
      debugName: 'handle_newtype',
      callFfi: (port) => inner.wire_handle_newtype(port, _api2wire_box_autoadd_new_type_int(arg)),
      parseSuccessData: _wire2api_new_type_int,
      hint: hint));

  Future<List<MySize>> handleListOfStruct({required List<MySize> l, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
          debugName: 'handle_list_of_struct',
          callFfi: (port) => inner.wire_handle_list_of_struct(port, _api2wire_list_my_size(l)),
          parseSuccessData: _wire2api_list_my_size,
          hint: hint));

  Future<MyTreeNode> handleComplexStruct({required MyTreeNode s, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
      debugName: 'handle_complex_struct',
      callFfi: (port) => inner.wire_handle_complex_struct(port, _api2wire_box_autoadd_my_tree_node(s)),
      parseSuccessData: _wire2api_my_tree_node,
      hint: hint));

  Stream<String> handleStream({required String arg, dynamic hint}) => executeStream(FlutterRustBridgeTask(
      debugName: 'handle_stream',
      callFfi: (port) => inner.wire_handle_stream(port, _api2wire_String(arg)),
      parseSuccessData: _wire2api_String,
      hint: hint));

  Future<int> returnErr({dynamic hint}) => executeNormal(FlutterRustBridgeTask(
      debugName: 'return_err',
      callFfi: (port) => inner.wire_return_err(
            port,
          ),
      parseSuccessData: _wire2api_i32,
      hint: hint));

  Future<int> returnPanic({dynamic hint}) => executeNormal(FlutterRustBridgeTask(
      debugName: 'return_panic',
      callFfi: (port) => inner.wire_return_panic(
            port,
          ),
      parseSuccessData: _wire2api_i32,
      hint: hint));

  Future<double?> handleOptionalReturn({required double left, required double right, dynamic hint}) => execute(
      'handle_optional_return',
      (port) => inner.wire_handle_optional_return(port, _api2wire_f64(left), _api2wire_f64(right)),
      _wire2api_Option_f64,
      hint);

  Future<Element?> handleOptionalStruct({String? document, dynamic hint}) => execute(
      'handle_optional_struct',
      (port) => inner.wire_handle_optional_struct(port, _api2wire_Option_String(document)),
      _wire2api_Option_element,
      hint);

  Future<ExoticOptionals?> increment({ExoticOptionals? opt, dynamic hint}) => execute(
      'increment',
      (port) => inner.wire_increment(port, _api2wire_Option_exotic_optionals(opt)),
      _wire2api_Option_exotic_optionals,
      hint);

  Future<double> handleBoxedOptional({double? opt, dynamic hint}) => execute('handle_boxed_optional',
      (port) => inner.wire_handle_boxed_optional(port, _api2wire_Option_box_f64(opt)), _wire2api_f64, hint);

  // Section: api2wire
  int _api2wire_i32(int raw) {
    return raw;
  }

  int _api2wire_i64(int raw) {
    return raw;
  }

  double _api2wire_f64(double raw) {
    return raw;
  }

  bool _api2wire_bool(bool raw) {
    return raw;
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_String(String raw) {
    return _api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  int _api2wire_u8(int raw) {
    return raw;
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_ZeroCopyBuffer_Uint8List(Uint8List raw) {
    return _api2wire_uint_8_list(raw);
  }

  ffi.Pointer<wire_MySize> _api2wire_box_autoadd_my_size(MySize raw) {
    final ptr = inner.new_box_autoadd_my_size();
    _api_fill_to_wire_my_size(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<wire_MySize> _api2wire_box_my_size(MySize raw) {
    final ptr = inner.new_box_my_size();
    _api_fill_to_wire_my_size(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<wire_NewTypeInt> _api2wire_box_autoadd_new_type_int(NewTypeInt raw) {
    final ptr = inner.new_box_autoadd_new_type_int();
    _api_fill_to_wire_new_type_int(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<wire_list_my_size> _api2wire_list_my_size(List<MySize> raw) {
    final ans = inner.new_list_my_size(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_my_size(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  ffi.Pointer<wire_MyTreeNode> _api2wire_box_autoadd_my_tree_node(MyTreeNode raw) {
    final ptr = inner.new_box_autoadd_my_tree_node();
    _api_fill_to_wire_my_tree_node(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<wire_list_my_tree_node> _api2wire_list_my_tree_node(List<MyTreeNode> raw) {
    final ans = inner.new_list_my_tree_node(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_my_tree_node(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  ffi.Pointer<ffi.Double> _api2wire_Option_f64(double? raw) {
    return raw == null ? ffi.nullptr : _api2wire_box_autoadd_f64(raw);
  }

  ffi.Pointer<ffi.Double> _api2wire_box_autoadd_f64(double raw) {
    return inner.new_box_autoadd_f64(raw);
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_Option_String(String? raw) {
    return raw == null ? ffi.nullptr : _api2wire_String(raw);
  }

  ffi.Pointer<wire_Element> _api2wire_Option_element(Element? raw) {
    return raw == null ? ffi.nullptr : _api2wire_box_autoadd_element(raw);
  }

  ffi.Pointer<wire_Element> _api2wire_box_autoadd_element(Element raw) {
    final ptr = inner.new_box_autoadd_element();
    _api_fill_to_wire_element(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<wire_list_attribute> _api2wire_Option_list_attribute(List<Attribute>? raw) {
    return raw == null ? ffi.nullptr : _api2wire_list_attribute(raw);
  }

  ffi.Pointer<wire_list_attribute> _api2wire_list_attribute(List<Attribute> raw) {
    final ans = inner.new_list_attribute(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_attribute(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  ffi.Pointer<wire_list_element> _api2wire_Option_list_element(List<Element>? raw) {
    return raw == null ? ffi.nullptr : _api2wire_list_element(raw);
  }

  ffi.Pointer<wire_list_element> _api2wire_list_element(List<Element> raw) {
    final ans = inner.new_list_element(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_element(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  ffi.Pointer<wire_ExoticOptionals> _api2wire_Option_exotic_optionals(ExoticOptionals? raw) {
    return raw == null ? ffi.nullptr : _api2wire_box_autoadd_exotic_optionals(raw);
  }

  ffi.Pointer<wire_ExoticOptionals> _api2wire_box_autoadd_exotic_optionals(ExoticOptionals raw) {
    final ptr = inner.new_box_autoadd_exotic_optionals();
    _api_fill_to_wire_exotic_optionals(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<ffi.Int32> _api2wire_Option_i32(int? raw) {
    return raw == null ? ffi.nullptr : _api2wire_box_autoadd_i32(raw);
  }

  ffi.Pointer<ffi.Int32> _api2wire_box_autoadd_i32(int raw) {
    return inner.new_box_autoadd_i32(raw);
  }

  ffi.Pointer<ffi.Int64> _api2wire_Option_i64(int? raw) {
    return raw == null ? ffi.nullptr : _api2wire_box_autoadd_i64(raw);
  }

  ffi.Pointer<ffi.Int64> _api2wire_box_autoadd_i64(int raw) {
    return inner.new_box_autoadd_i64(raw);
  }

  ffi.Pointer<ffi.Uint8> _api2wire_Option_bool(bool? raw) {
    return raw == null ? ffi.nullptr : _api2wire_box_autoadd_bool(raw);
  }

  ffi.Pointer<ffi.Uint8> _api2wire_box_autoadd_bool(bool raw) {
    return inner.new_box_autoadd_bool(raw);
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_Option_ZeroCopyBuffer_Uint8List(Uint8List? raw) {
    return raw == null ? ffi.nullptr : _api2wire_ZeroCopyBuffer_Uint8List(raw);
  }

  ffi.Pointer<wire_int_8_list> _api2wire_Option_int_8_list(Int8List? raw) {
    return raw == null ? ffi.nullptr : _api2wire_int_8_list(raw);
  }

  ffi.Pointer<wire_int_8_list> _api2wire_int_8_list(Int8List raw) {
    final ans = inner.new_int_8_list(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  int _api2wire_i8(int raw) {
    return raw;
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_Option_uint_8_list(Uint8List? raw) {
    return raw == null ? ffi.nullptr : _api2wire_uint_8_list(raw);
  }

  ffi.Pointer<wire_float_64_list> _api2wire_Option_float_64_list(Float64List? raw) {
    return raw == null ? ffi.nullptr : _api2wire_float_64_list(raw);
  }

  ffi.Pointer<wire_float_64_list> _api2wire_float_64_list(Float64List raw) {
    final ans = inner.new_float_64_list(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  ffi.Pointer<wire_list_Option_attribute> _api2wire_list_Option_attribute(List<Attribute?> raw) {
    final ans = inner.new_list_Option_attribute(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_Option_attribute(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  ffi.Pointer<wire_Attribute> _api2wire_Option_attribute(Attribute? raw) {
    return raw == null ? ffi.nullptr : _api2wire_box_autoadd_attribute(raw);
  }

  ffi.Pointer<wire_Attribute> _api2wire_box_autoadd_attribute(Attribute raw) {
    final ptr = inner.new_box_autoadd_attribute();
    _api_fill_to_wire_attribute(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<wire_list_Option_attribute> _api2wire_Option_list_Option_attribute(List<Attribute?>? raw) {
    return raw == null ? ffi.nullptr : _api2wire_list_Option_attribute(raw);
  }

  ffi.Pointer<wire_NewTypeInt> _api2wire_Option_new_type_int(NewTypeInt? raw) {
    return raw == null ? ffi.nullptr : _api2wire_box_autoadd_new_type_int(raw);
  }

  ffi.Pointer<ffi.Double> _api2wire_Option_box_f64(double? raw) {
    return raw == null ? ffi.nullptr : _api2wire_box_f64(raw);
  }

  ffi.Pointer<ffi.Double> _api2wire_box_f64(double raw) {
    return inner.new_box_f64(raw);
  }

  // Section: api_fill_to_wire

  void _api_fill_to_wire_my_size(MySize apiObj, wire_MySize wireObj) {
    wireObj.width = _api2wire_i32(apiObj.width);
    wireObj.height = _api2wire_i32(apiObj.height);
  }

  void _api_fill_to_wire_new_type_int(NewTypeInt apiObj, wire_NewTypeInt wireObj) {
    wireObj.field0 = _api2wire_i64(apiObj.field0);
  }

  void _api_fill_to_wire_my_tree_node(MyTreeNode apiObj, wire_MyTreeNode wireObj) {
    wireObj.value_i32 = _api2wire_i32(apiObj.valueI32);
    wireObj.value_vec_u8 = _api2wire_uint_8_list(apiObj.valueVecU8);
    wireObj.children = _api2wire_list_my_tree_node(apiObj.children);
  }

  void _api_fill_to_wire_Option_element(Element? apiObj, wire_Element wireObj) {
    if (apiObj != null) _api_fill_to_wire_element(apiObj, wireObj);
  }

  void _api_fill_to_wire_element(Element apiObj, wire_Element wireObj) {
    wireObj.tag = _api2wire_Option_String(apiObj.tag);
    wireObj.text = _api2wire_Option_String(apiObj.text);
    wireObj.attributes = _api2wire_Option_list_attribute(apiObj.attributes);
    wireObj.children = _api2wire_Option_list_element(apiObj.children);
  }

  void _api_fill_to_wire_attribute(Attribute apiObj, wire_Attribute wireObj) {
    wireObj.key = _api2wire_String(apiObj.key);
    wireObj.value = _api2wire_String(apiObj.value);
  }

  void _api_fill_to_wire_Option_exotic_optionals(ExoticOptionals? apiObj, wire_ExoticOptionals wireObj) {
    if (apiObj != null) _api_fill_to_wire_exotic_optionals(apiObj, wireObj);
  }

  void _api_fill_to_wire_exotic_optionals(ExoticOptionals apiObj, wire_ExoticOptionals wireObj) {
    wireObj.int32 = _api2wire_Option_i32(apiObj.int32);
    wireObj.int64 = _api2wire_Option_i64(apiObj.int64);
    wireObj.float64 = _api2wire_Option_f64(apiObj.float64);
    wireObj.boolean = _api2wire_Option_bool(apiObj.boolean);
    wireObj.zerocopy = _api2wire_Option_ZeroCopyBuffer_Uint8List(apiObj.zerocopy);
    wireObj.int8list = _api2wire_Option_int_8_list(apiObj.int8List);
    wireObj.uint8list = _api2wire_Option_uint_8_list(apiObj.uint8List);
    wireObj.float64list = _api2wire_Option_float_64_list(apiObj.float64List);
    wireObj.attributes = _api2wire_Option_list_attribute(apiObj.attributes);
    wireObj.attributes_nullable = _api2wire_list_Option_attribute(apiObj.attributesNullable);
    wireObj.nullable_attributes = _api2wire_Option_list_Option_attribute(apiObj.nullableAttributes);
    wireObj.newtypeint = _api2wire_Option_new_type_int(apiObj.newtypeint);
  }

  void _api_fill_to_wire_Option_attribute(Attribute? apiObj, wire_Attribute wireObj) {
    if (apiObj != null) _api_fill_to_wire_attribute(apiObj, wireObj);
  }

  void _api_fill_to_wire_Option_new_type_int(NewTypeInt? apiObj, wire_NewTypeInt wireObj) {
    if (apiObj != null) _api_fill_to_wire_new_type_int(apiObj, wireObj);
  }
}

// Section: wire2api
int _wire2api_i32(dynamic raw) {
  return raw as int;
}

int _wire2api_i64(dynamic raw) {
  return raw as int;
}

double _wire2api_f64(dynamic raw) {
  return raw as double;
}

bool _wire2api_bool(dynamic raw) {
  return raw as bool;
}

String _wire2api_String(dynamic raw) {
  return raw as String;
}

Uint8List _wire2api_uint_8_list(dynamic raw) {
  return raw as Uint8List;
}

int _wire2api_u8(dynamic raw) {
  return raw as int;
}

Uint8List _wire2api_ZeroCopyBuffer_Uint8List(dynamic raw) {
  return raw as Uint8List;
}

MySize _wire2api_box_autoadd_my_size(dynamic raw) {
  return raw as MySize;
}

MySize _wire2api_my_size(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return MySize(
    width: _wire2api_i32(arr[0]),
    height: _wire2api_i32(arr[1]),
  );
}

MySize _wire2api_box_my_size(dynamic raw) {
  return raw as MySize;
}

NewTypeInt _wire2api_box_autoadd_new_type_int(dynamic raw) {
  return raw as NewTypeInt;
}

NewTypeInt _wire2api_new_type_int(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
  return NewTypeInt(
    field0: _wire2api_i64(arr[0]),
  );
}

List<MySize> _wire2api_list_my_size(dynamic raw) {
  return (raw as List<dynamic>).map((item) => _wire2api_my_size(item)).toList();
}

MyTreeNode _wire2api_box_autoadd_my_tree_node(dynamic raw) {
  return raw as MyTreeNode;
}

MyTreeNode _wire2api_my_tree_node(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
  return MyTreeNode(
    valueI32: _wire2api_i32(arr[0]),
    valueVecU8: _wire2api_uint_8_list(arr[1]),
    children: _wire2api_list_my_tree_node(arr[2]),
  );
}

List<MyTreeNode> _wire2api_list_my_tree_node(dynamic raw) {
  return (raw as List<dynamic>).map((item) => _wire2api_my_tree_node(item)).toList();
}

double? _wire2api_Option_f64(dynamic raw) {
  return raw == null ? null : _wire2api_f64(raw);
}

double _wire2api_box_autoadd_f64(dynamic raw) {
  return raw as double;
}

String? _wire2api_Option_String(dynamic raw) {
  return raw == null ? null : _wire2api_String(raw);
}

Element? _wire2api_Option_element(dynamic raw) {
  return raw == null ? null : _wire2api_element(raw);
}

Element _wire2api_box_autoadd_element(dynamic raw) {
  return raw as Element;
}

Element _wire2api_element(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
  return Element(
    tag: _wire2api_Option_String(arr[0]),
    text: _wire2api_Option_String(arr[1]),
    attributes: _wire2api_Option_list_attribute(arr[2]),
    children: _wire2api_Option_list_element(arr[3]),
  );
}

List<Attribute>? _wire2api_Option_list_attribute(dynamic raw) {
  return raw == null ? null : _wire2api_list_attribute(raw);
}

List<Attribute> _wire2api_list_attribute(dynamic raw) {
  return (raw as List<dynamic>).map((item) => _wire2api_attribute(item)).toList();
}

Attribute _wire2api_attribute(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return Attribute(
    key: _wire2api_String(arr[0]),
    value: _wire2api_String(arr[1]),
  );
}

List<Element>? _wire2api_Option_list_element(dynamic raw) {
  return raw == null ? null : _wire2api_list_element(raw);
}

List<Element> _wire2api_list_element(dynamic raw) {
  return (raw as List<dynamic>).map((item) => _wire2api_element(item)).toList();
}

ExoticOptionals? _wire2api_Option_exotic_optionals(dynamic raw) {
  return raw == null ? null : _wire2api_exotic_optionals(raw);
}

ExoticOptionals _wire2api_box_autoadd_exotic_optionals(dynamic raw) {
  return raw as ExoticOptionals;
}

ExoticOptionals _wire2api_exotic_optionals(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 12) throw Exception('unexpected arr length: expect 12 but see ${arr.length}');
  return ExoticOptionals(
    int32: _wire2api_Option_i32(arr[0]),
    int64: _wire2api_Option_i64(arr[1]),
    float64: _wire2api_Option_f64(arr[2]),
    boolean: _wire2api_Option_bool(arr[3]),
    zerocopy: _wire2api_Option_ZeroCopyBuffer_Uint8List(arr[4]),
    int8List: _wire2api_Option_int_8_list(arr[5]),
    uint8List: _wire2api_Option_uint_8_list(arr[6]),
    float64List: _wire2api_Option_float_64_list(arr[7]),
    attributes: _wire2api_Option_list_attribute(arr[8]),
    attributesNullable: _wire2api_list_Option_attribute(arr[9]),
    nullableAttributes: _wire2api_Option_list_Option_attribute(arr[10]),
    newtypeint: _wire2api_Option_new_type_int(arr[11]),
  );
}

int? _wire2api_Option_i32(dynamic raw) {
  return raw == null ? null : _wire2api_i32(raw);
}

int _wire2api_box_autoadd_i32(dynamic raw) {
  return raw as int;
}

int? _wire2api_Option_i64(dynamic raw) {
  return raw == null ? null : _wire2api_i64(raw);
}

int _wire2api_box_autoadd_i64(dynamic raw) {
  return raw as int;
}

bool? _wire2api_Option_bool(dynamic raw) {
  return raw == null ? null : _wire2api_bool(raw);
}

bool _wire2api_box_autoadd_bool(dynamic raw) {
  return raw as bool;
}

Uint8List? _wire2api_Option_ZeroCopyBuffer_Uint8List(dynamic raw) {
  return raw == null ? null : _wire2api_ZeroCopyBuffer_Uint8List(raw);
}

Int8List? _wire2api_Option_int_8_list(dynamic raw) {
  return raw == null ? null : _wire2api_int_8_list(raw);
}

Int8List _wire2api_int_8_list(dynamic raw) {
  return raw as Int8List;
}

int _wire2api_i8(dynamic raw) {
  return raw as int;
}

Uint8List? _wire2api_Option_uint_8_list(dynamic raw) {
  return raw == null ? null : _wire2api_uint_8_list(raw);
}

Float64List? _wire2api_Option_float_64_list(dynamic raw) {
  return raw == null ? null : _wire2api_float_64_list(raw);
}

Float64List _wire2api_float_64_list(dynamic raw) {
  return raw as Float64List;
}

List<Attribute?> _wire2api_list_Option_attribute(dynamic raw) {
  return (raw as List<dynamic>).map((item) => _wire2api_Option_attribute(item)).toList();
}

Attribute? _wire2api_Option_attribute(dynamic raw) {
  return raw == null ? null : _wire2api_attribute(raw);
}

Attribute _wire2api_box_autoadd_attribute(dynamic raw) {
  return raw as Attribute;
}

List<Attribute?>? _wire2api_Option_list_Option_attribute(dynamic raw) {
  return raw == null ? null : _wire2api_list_Option_attribute(raw);
}

NewTypeInt? _wire2api_Option_new_type_int(dynamic raw) {
  return raw == null ? null : _wire2api_new_type_int(raw);
}

double? _wire2api_Option_box_f64(dynamic raw) {
  return raw == null ? null : _wire2api_box_f64(raw);
}

double _wire2api_box_f64(dynamic raw) {
  return raw as double;
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class FlutterRustBridgeExampleWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FlutterRustBridgeExampleWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FlutterRustBridgeExampleWire.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup)
      : _lookup = lookup;

  void wire_simple_adder(
    int port,
    int a,
    int b,
  ) {
    return _wire_simple_adder(
      port,
      a,
      b,
    );
  }

  late final _wire_simple_adderPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Int32)>>('wire_simple_adder');
  late final _wire_simple_adder = _wire_simple_adderPtr.asFunction<void Function(int, int, int)>();

  void wire_primitive_types(
    int port,
    int my_i32,
    int my_i64,
    double my_f64,
    bool my_bool,
  ) {
    return _wire_primitive_types(
      port,
      my_i32,
      my_i64,
      my_f64,
      my_bool ? 1 : 0,
    );
  }

  late final _wire_primitive_typesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Int64, ffi.Double, ffi.Uint8)>>(
          'wire_primitive_types');
  late final _wire_primitive_types = _wire_primitive_typesPtr.asFunction<void Function(int, int, int, double, int)>();

  void wire_handle_string(
    int port,
    ffi.Pointer<wire_uint_8_list> s,
  ) {
    return _wire_handle_string(
      port,
      s,
    );
  }

  late final _wire_handle_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_handle_string');
  late final _wire_handle_string =
      _wire_handle_stringPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_handle_vec_u8(
    int port,
    ffi.Pointer<wire_uint_8_list> v,
  ) {
    return _wire_handle_vec_u8(
      port,
      v,
    );
  }

  late final _wire_handle_vec_u8Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_handle_vec_u8');
  late final _wire_handle_vec_u8 =
      _wire_handle_vec_u8Ptr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_handle_zero_copy_result(
    int port,
    int n,
  ) {
    return _wire_handle_zero_copy_result(
      port,
      n,
    );
  }

  late final _wire_handle_zero_copy_resultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32)>>('wire_handle_zero_copy_result');
  late final _wire_handle_zero_copy_result = _wire_handle_zero_copy_resultPtr.asFunction<void Function(int, int)>();

  void wire_handle_struct(
    int port,
    ffi.Pointer<wire_MySize> arg,
    ffi.Pointer<wire_MySize> boxed,
  ) {
    return _wire_handle_struct(
      port,
      arg,
      boxed,
    );
  }

  late final _wire_handle_structPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_MySize>, ffi.Pointer<wire_MySize>)>>(
          'wire_handle_struct');
  late final _wire_handle_struct =
      _wire_handle_structPtr.asFunction<void Function(int, ffi.Pointer<wire_MySize>, ffi.Pointer<wire_MySize>)>();

  void wire_handle_newtype(
    int port,
    ffi.Pointer<wire_NewTypeInt> arg,
  ) {
    return _wire_handle_newtype(
      port,
      arg,
    );
  }

  late final _wire_handle_newtypePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NewTypeInt>)>>('wire_handle_newtype');
  late final _wire_handle_newtype =
      _wire_handle_newtypePtr.asFunction<void Function(int, ffi.Pointer<wire_NewTypeInt>)>();

  void wire_handle_list_of_struct(
    int port,
    ffi.Pointer<wire_list_my_size> l,
  ) {
    return _wire_handle_list_of_struct(
      port,
      l,
    );
  }

  late final _wire_handle_list_of_structPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_list_my_size>)>>(
          'wire_handle_list_of_struct');
  late final _wire_handle_list_of_struct =
      _wire_handle_list_of_structPtr.asFunction<void Function(int, ffi.Pointer<wire_list_my_size>)>();

  void wire_handle_complex_struct(
    int port,
    ffi.Pointer<wire_MyTreeNode> s,
  ) {
    return _wire_handle_complex_struct(
      port,
      s,
    );
  }

  late final _wire_handle_complex_structPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_MyTreeNode>)>>(
          'wire_handle_complex_struct');
  late final _wire_handle_complex_struct =
      _wire_handle_complex_structPtr.asFunction<void Function(int, ffi.Pointer<wire_MyTreeNode>)>();

  void wire_handle_stream(
    int port,
    ffi.Pointer<wire_uint_8_list> arg,
  ) {
    return _wire_handle_stream(
      port,
      arg,
    );
  }

  late final _wire_handle_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_handle_stream');
  late final _wire_handle_stream =
      _wire_handle_streamPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_return_err(
    int port,
  ) {
    return _wire_return_err(
      port,
    );
  }

  late final _wire_return_errPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_return_err');
  late final _wire_return_err = _wire_return_errPtr.asFunction<void Function(int)>();

  void wire_return_panic(
    int port,
  ) {
    return _wire_return_panic(
      port,
    );
  }

  late final _wire_return_panicPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_return_panic');
  late final _wire_return_panic = _wire_return_panicPtr.asFunction<void Function(int)>();

  void wire_handle_optional_return(
    int port,
    double left,
    double right,
  ) {
    return _wire_handle_optional_return(
      port,
      left,
      right,
    );
  }

  late final _wire_handle_optional_returnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Double, ffi.Double)>>('wire_handle_optional_return');
  late final _wire_handle_optional_return =
      _wire_handle_optional_returnPtr.asFunction<void Function(int, double, double)>();

  void wire_handle_optional_struct(
    int port,
    ffi.Pointer<wire_uint_8_list> document,
  ) {
    return _wire_handle_optional_struct(
      port,
      document,
    );
  }

  late final _wire_handle_optional_structPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_handle_optional_struct');
  late final _wire_handle_optional_struct =
      _wire_handle_optional_structPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_increment(
    int port,
    ffi.Pointer<wire_ExoticOptionals> opt,
  ) {
    return _wire_increment(
      port,
      opt,
    );
  }

  late final _wire_incrementPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_ExoticOptionals>)>>('wire_increment');
  late final _wire_increment = _wire_incrementPtr.asFunction<void Function(int, ffi.Pointer<wire_ExoticOptionals>)>();

  void wire_handle_boxed_optional(
    int port,
    ffi.Pointer<ffi.Double> opt,
  ) {
    return _wire_handle_boxed_optional(
      port,
      opt,
    );
  }

  late final _wire_handle_boxed_optionalPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Double>)>>('wire_handle_boxed_optional');
  late final _wire_handle_boxed_optional =
      _wire_handle_boxed_optionalPtr.asFunction<void Function(int, ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list(
    int len,
  ) {
    return _new_uint_8_list(
      len,
    );
  }

  late final _new_uint_8_listPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>('new_uint_8_list');
  late final _new_uint_8_list = _new_uint_8_listPtr.asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  ffi.Pointer<wire_MySize> new_box_autoadd_my_size() {
    return _new_box_autoadd_my_size();
  }

  late final _new_box_autoadd_my_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_MySize> Function()>>('new_box_autoadd_my_size');
  late final _new_box_autoadd_my_size = _new_box_autoadd_my_sizePtr.asFunction<ffi.Pointer<wire_MySize> Function()>();

  ffi.Pointer<wire_MySize> new_box_my_size() {
    return _new_box_my_size();
  }

  late final _new_box_my_sizePtr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_MySize> Function()>>('new_box_my_size');
  late final _new_box_my_size = _new_box_my_sizePtr.asFunction<ffi.Pointer<wire_MySize> Function()>();

  ffi.Pointer<wire_NewTypeInt> new_box_autoadd_new_type_int() {
    return _new_box_autoadd_new_type_int();
  }

  late final _new_box_autoadd_new_type_intPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_NewTypeInt> Function()>>('new_box_autoadd_new_type_int');
  late final _new_box_autoadd_new_type_int =
      _new_box_autoadd_new_type_intPtr.asFunction<ffi.Pointer<wire_NewTypeInt> Function()>();

  ffi.Pointer<wire_list_my_size> new_list_my_size(
    int len,
  ) {
    return _new_list_my_size(
      len,
    );
  }

  late final _new_list_my_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_list_my_size> Function(ffi.Int32)>>('new_list_my_size');
  late final _new_list_my_size = _new_list_my_sizePtr.asFunction<ffi.Pointer<wire_list_my_size> Function(int)>();

  ffi.Pointer<wire_MyTreeNode> new_box_autoadd_my_tree_node() {
    return _new_box_autoadd_my_tree_node();
  }

  late final _new_box_autoadd_my_tree_nodePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_MyTreeNode> Function()>>('new_box_autoadd_my_tree_node');
  late final _new_box_autoadd_my_tree_node =
      _new_box_autoadd_my_tree_nodePtr.asFunction<ffi.Pointer<wire_MyTreeNode> Function()>();

  ffi.Pointer<wire_list_my_tree_node> new_list_my_tree_node(
    int len,
  ) {
    return _new_list_my_tree_node(
      len,
    );
  }

  late final _new_list_my_tree_nodePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_list_my_tree_node> Function(ffi.Int32)>>('new_list_my_tree_node');
  late final _new_list_my_tree_node =
      _new_list_my_tree_nodePtr.asFunction<ffi.Pointer<wire_list_my_tree_node> Function(int)>();

  ffi.Pointer<ffi.Double> new_box_autoadd_f64(
    double value,
  ) {
    return _new_box_autoadd_f64(
      value,
    );
  }

  late final _new_box_autoadd_f64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Double> Function(ffi.Double)>>('new_box_autoadd_f64');
  late final _new_box_autoadd_f64 = _new_box_autoadd_f64Ptr.asFunction<ffi.Pointer<ffi.Double> Function(double)>();

  ffi.Pointer<wire_Element> new_box_autoadd_element() {
    return _new_box_autoadd_element();
  }

  late final _new_box_autoadd_elementPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Element> Function()>>('new_box_autoadd_element');
  late final _new_box_autoadd_element = _new_box_autoadd_elementPtr.asFunction<ffi.Pointer<wire_Element> Function()>();

  ffi.Pointer<wire_list_attribute> new_list_attribute(
    int len,
  ) {
    return _new_list_attribute(
      len,
    );
  }

  late final _new_list_attributePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_list_attribute> Function(ffi.Int32)>>('new_list_attribute');
  late final _new_list_attribute = _new_list_attributePtr.asFunction<ffi.Pointer<wire_list_attribute> Function(int)>();

  ffi.Pointer<wire_list_element> new_list_element(
    int len,
  ) {
    return _new_list_element(
      len,
    );
  }

  late final _new_list_elementPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_list_element> Function(ffi.Int32)>>('new_list_element');
  late final _new_list_element = _new_list_elementPtr.asFunction<ffi.Pointer<wire_list_element> Function(int)>();

  ffi.Pointer<wire_ExoticOptionals> new_box_autoadd_exotic_optionals() {
    return _new_box_autoadd_exotic_optionals();
  }

  late final _new_box_autoadd_exotic_optionalsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_ExoticOptionals> Function()>>('new_box_autoadd_exotic_optionals');
  late final _new_box_autoadd_exotic_optionals =
      _new_box_autoadd_exotic_optionalsPtr.asFunction<ffi.Pointer<wire_ExoticOptionals> Function()>();

  ffi.Pointer<ffi.Int32> new_box_autoadd_i32(
    int value,
  ) {
    return _new_box_autoadd_i32(
      value,
    );
  }

  late final _new_box_autoadd_i32Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function(ffi.Int32)>>('new_box_autoadd_i32');
  late final _new_box_autoadd_i32 = _new_box_autoadd_i32Ptr.asFunction<ffi.Pointer<ffi.Int32> Function(int)>();

  ffi.Pointer<ffi.Int64> new_box_autoadd_i64(
    int value,
  ) {
    return _new_box_autoadd_i64(
      value,
    );
  }

  late final _new_box_autoadd_i64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int64> Function(ffi.Int64)>>('new_box_autoadd_i64');
  late final _new_box_autoadd_i64 = _new_box_autoadd_i64Ptr.asFunction<ffi.Pointer<ffi.Int64> Function(int)>();

  ffi.Pointer<ffi.Uint8> new_box_autoadd_bool(
    bool value,
  ) {
    return _new_box_autoadd_bool(
      value ? 1 : 0,
    );
  }

  late final _new_box_autoadd_boolPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint8> Function(ffi.Uint8)>>('new_box_autoadd_bool');
  late final _new_box_autoadd_bool = _new_box_autoadd_boolPtr.asFunction<ffi.Pointer<ffi.Uint8> Function(int)>();

  ffi.Pointer<wire_int_8_list> new_int_8_list(
    int len,
  ) {
    return _new_int_8_list(
      len,
    );
  }

  late final _new_int_8_listPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_int_8_list> Function(ffi.Int32)>>('new_int_8_list');
  late final _new_int_8_list = _new_int_8_listPtr.asFunction<ffi.Pointer<wire_int_8_list> Function(int)>();

  ffi.Pointer<wire_float_64_list> new_float_64_list(
    int len,
  ) {
    return _new_float_64_list(
      len,
    );
  }

  late final _new_float_64_listPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_float_64_list> Function(ffi.Int32)>>('new_float_64_list');
  late final _new_float_64_list = _new_float_64_listPtr.asFunction<ffi.Pointer<wire_float_64_list> Function(int)>();

  ffi.Pointer<wire_list_Option_attribute> new_list_Option_attribute(
    int len,
  ) {
    return _new_list_Option_attribute(
      len,
    );
  }

  late final _new_list_Option_attributePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_list_Option_attribute> Function(ffi.Int32)>>(
          'new_list_Option_attribute');
  late final _new_list_Option_attribute =
      _new_list_Option_attributePtr.asFunction<ffi.Pointer<wire_list_Option_attribute> Function(int)>();

  ffi.Pointer<wire_Attribute> new_box_autoadd_attribute() {
    return _new_box_autoadd_attribute();
  }

  late final _new_box_autoadd_attributePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Attribute> Function()>>('new_box_autoadd_attribute');
  late final _new_box_autoadd_attribute =
      _new_box_autoadd_attributePtr.asFunction<ffi.Pointer<wire_Attribute> Function()>();

  ffi.Pointer<ffi.Double> new_box_f64(
    double value,
  ) {
    return _new_box_f64(
      value,
    );
  }

  late final _new_box_f64Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Double> Function(ffi.Double)>>('new_box_f64');
  late final _new_box_f64 = _new_box_f64Ptr.asFunction<ffi.Pointer<ffi.Double> Function(double)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>('store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr.asFunction<void Function(DartPostCObjectFnType)>();
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_MySize extends ffi.Struct {
  @ffi.Int32()
  external int width;

  @ffi.Int32()
  external int height;
}

class wire_NewTypeInt extends ffi.Struct {
  @ffi.Int64()
  external int field0;
}

class wire_list_my_size extends ffi.Struct {
  external ffi.Pointer<wire_MySize> ptr;

  @ffi.Int32()
  external int len;
}

class wire_list_my_tree_node extends ffi.Struct {
  external ffi.Pointer<wire_MyTreeNode> ptr;

  @ffi.Int32()
  external int len;
}

class wire_MyTreeNode extends ffi.Struct {
  @ffi.Int32()
  external int value_i32;

  external ffi.Pointer<wire_uint_8_list> value_vec_u8;

  external ffi.Pointer<wire_list_my_tree_node> children;
}

class wire_int_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_float_64_list extends ffi.Struct {
  external ffi.Pointer<ffi.Double> ptr;

  @ffi.Int32()
  external int len;
}

class wire_Attribute extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> key;

  external ffi.Pointer<wire_uint_8_list> value;
}

class wire_list_attribute extends ffi.Struct {
  external ffi.Pointer<wire_Attribute> ptr;

  @ffi.Int32()
  external int len;
}

class wire_list_Option_attribute extends ffi.Struct {
  external ffi.Pointer<wire_Attribute> ptr;

  @ffi.Int32()
  external int len;
}

class wire_ExoticOptionals extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> int32;

  external ffi.Pointer<ffi.Int64> int64;

  external ffi.Pointer<ffi.Double> float64;

  external ffi.Pointer<ffi.Uint8> boolean;

  external ffi.Pointer<wire_uint_8_list> zerocopy;

  external ffi.Pointer<wire_int_8_list> int8list;

  external ffi.Pointer<wire_uint_8_list> uint8list;

  external ffi.Pointer<wire_float_64_list> float64list;

  external ffi.Pointer<wire_list_attribute> attributes;

  external ffi.Pointer<wire_list_Option_attribute> attributes_nullable;

  external ffi.Pointer<wire_list_Option_attribute> nullable_attributes;

  external ffi.Pointer<wire_NewTypeInt> newtypeint;
}

class wire_list_element extends ffi.Struct {
  external ffi.Pointer<wire_Element> ptr;

  @ffi.Int32()
  external int len;
}

class wire_Element extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> tag;

  external ffi.Pointer<wire_uint_8_list> text;

  external ffi.Pointer<wire_list_attribute> attributes;

  external ffi.Pointer<wire_list_element> children;
}

typedef DartPostCObjectFnType = ffi.Pointer<ffi.NativeFunction<ffi.Uint8 Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
