// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas
import 'dart:convert';
import 'dart:typed_data';

import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'dart:ffi' as ffi;

abstract class FlutterRustBridgeExample extends FlutterRustBridgeBase<FlutterRustBridgeExampleWire> {
  factory FlutterRustBridgeExample(ffi.DynamicLibrary dylib) =>
      FlutterRustBridgeExampleImpl.raw(FlutterRustBridgeExampleWire(dylib));

  FlutterRustBridgeExample.raw(FlutterRustBridgeExampleWire inner) : super(inner);

  Future<int> simpleAdder({required int a, required int b, dynamic hint});

  Future<int> primitiveTypes(
      {required int myI32, required int myI64, required double myF64, required bool myBool, dynamic hint});

  Future<String> handleString({required String s, dynamic hint});

  Future<Uint8List> handleVecU8({required Uint8List v, dynamic hint});

  Future<Uint8List> handleZeroCopyResult({required int n, dynamic hint});

  Future<MySize> handleStruct({required MySize arg, required MySize boxed, dynamic hint});

  Future<NewTypeInt> handleNewtype({required NewTypeInt arg, dynamic hint});

  Future<List<MySize>> handleListOfStruct({required List<MySize> l, dynamic hint});

  Future<MyTreeNode> handleComplexStruct({required MyTreeNode s, dynamic hint});

  Future<int> returnErr({dynamic hint});

  Future<int> returnPanic({dynamic hint});
}

class MySize {
  final int width;
  final int height;

  MySize({
    required this.width,
    required this.height,
  });
}

class NewTypeInt {
  final int field0;

  NewTypeInt({
    required this.field0,
  });
}

class MyTreeNode {
  final int valueI32;
  final Uint8List valueVecU8;
  final List<MyTreeNode> children;

  MyTreeNode({
    required this.valueI32,
    required this.valueVecU8,
    required this.children,
  });
}

// ------------------------- Implementation Details -------------------------

/// Implementations for FlutterRustBridgeExample. Prefer using FlutterRustBridgeExample if possible; but this class allows more
/// flexible customizations (such as subclassing to create an initializer, a logger, or
/// a timer).
class FlutterRustBridgeExampleImpl extends FlutterRustBridgeExample {
  FlutterRustBridgeExampleImpl.raw(FlutterRustBridgeExampleWire inner) : super.raw(inner);

  Future<int> simpleAdder({required int a, required int b, dynamic hint}) => execute(
      'simple_adder', (port) => inner.wire_simple_adder(port, _api2wire_i32(a), _api2wire_i32(b)), _wire2api_i32, hint);

  Future<int> primitiveTypes(
          {required int myI32, required int myI64, required double myF64, required bool myBool, dynamic hint}) =>
      execute(
          'primitive_types',
          (port) => inner.wire_primitive_types(
              port, _api2wire_i32(myI32), _api2wire_i64(myI64), _api2wire_f64(myF64), _api2wire_bool(myBool)),
          _wire2api_i32,
          hint);

  Future<String> handleString({required String s, dynamic hint}) =>
      execute('handle_string', (port) => inner.wire_handle_string(port, _api2wire_String(s)), _wire2api_String, hint);

  Future<Uint8List> handleVecU8({required Uint8List v, dynamic hint}) => execute(
      'handle_vec_u8', (port) => inner.wire_handle_vec_u8(port, _api2wire_uint_8_list(v)), _wire2api_uint_8_list, hint);

  Future<Uint8List> handleZeroCopyResult({required int n, dynamic hint}) => execute('handle_zero_copy_result',
      (port) => inner.wire_handle_zero_copy_result(port, _api2wire_i32(n)), _wire2api_ZeroCopyBuffer_Uint8List, hint);

  Future<MySize> handleStruct({required MySize arg, required MySize boxed, dynamic hint}) => execute(
      'handle_struct',
      (port) => inner.wire_handle_struct(port, _api2wire_box_autoadd_my_size(arg), _api2wire_box_my_size(boxed)),
      _wire2api_my_size,
      hint);

  Future<NewTypeInt> handleNewtype({required NewTypeInt arg, dynamic hint}) => execute('handle_newtype',
      (port) => inner.wire_handle_newtype(port, _api2wire_box_autoadd_new_type_int(arg)), _wire2api_new_type_int, hint);

  Future<List<MySize>> handleListOfStruct({required List<MySize> l, dynamic hint}) => execute('handle_list_of_struct',
      (port) => inner.wire_handle_list_of_struct(port, _api2wire_list_my_size(l)), _wire2api_list_my_size, hint);

  Future<MyTreeNode> handleComplexStruct({required MyTreeNode s, dynamic hint}) => execute(
      'handle_complex_struct',
      (port) => inner.wire_handle_complex_struct(port, _api2wire_box_autoadd_my_tree_node(s)),
      _wire2api_my_tree_node,
      hint);

  Future<int> returnErr({dynamic hint}) => execute(
      'return_err',
      (port) => inner.wire_return_err(
            port,
          ),
      _wire2api_i32,
      hint);

  Future<int> returnPanic({dynamic hint}) => execute(
      'return_panic',
      (port) => inner.wire_return_panic(
            port,
          ),
      _wire2api_i32,
      hint);

  // Section: api2wire
  int _api2wire_i32(int raw) {
    return raw;
  }

  int _api2wire_i64(int raw) {
    return raw;
  }

  double _api2wire_f64(double raw) {
    return raw;
  }

  bool _api2wire_bool(bool raw) {
    return raw;
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_String(String raw) {
    return _api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  int _api2wire_u8(int raw) {
    return raw;
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_ZeroCopyBuffer_Uint8List(Uint8List raw) {
    return _api2wire_uint_8_list(raw);
  }

  ffi.Pointer<wire_MySize> _api2wire_box_autoadd_my_size(MySize raw) {
    final ptr = inner.new_box_autoadd_my_size();
    _api_fill_to_wire_my_size(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<wire_MySize> _api2wire_box_my_size(MySize raw) {
    final ptr = inner.new_box_my_size();
    _api_fill_to_wire_my_size(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<wire_NewTypeInt> _api2wire_box_autoadd_new_type_int(NewTypeInt raw) {
    final ptr = inner.new_box_autoadd_new_type_int();
    _api_fill_to_wire_new_type_int(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<wire_list_my_size> _api2wire_list_my_size(List<MySize> raw) {
    final ans = inner.new_list_my_size(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_my_size(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  ffi.Pointer<wire_MyTreeNode> _api2wire_box_autoadd_my_tree_node(MyTreeNode raw) {
    final ptr = inner.new_box_autoadd_my_tree_node();
    _api_fill_to_wire_my_tree_node(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<wire_list_my_tree_node> _api2wire_list_my_tree_node(List<MyTreeNode> raw) {
    final ans = inner.new_list_my_tree_node(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_my_tree_node(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  // Section: api_fill_to_wire

  void _api_fill_to_wire_my_size(MySize apiObj, wire_MySize wireObj) {
    wireObj.width = _api2wire_i32(apiObj.width);
    wireObj.height = _api2wire_i32(apiObj.height);
  }

  void _api_fill_to_wire_new_type_int(NewTypeInt apiObj, wire_NewTypeInt wireObj) {
    wireObj.field0 = _api2wire_i64(apiObj.field0);
  }

  void _api_fill_to_wire_my_tree_node(MyTreeNode apiObj, wire_MyTreeNode wireObj) {
    wireObj.value_i32 = _api2wire_i32(apiObj.valueI32);
    wireObj.value_vec_u8 = _api2wire_uint_8_list(apiObj.valueVecU8);
    wireObj.children = _api2wire_list_my_tree_node(apiObj.children);
  }
}

// Section: wire2api
int _wire2api_i32(dynamic raw) {
  return raw as int;
}

int _wire2api_i64(dynamic raw) {
  return raw as int;
}

double _wire2api_f64(dynamic raw) {
  return raw as double;
}

bool _wire2api_bool(dynamic raw) {
  return raw as bool;
}

String _wire2api_String(dynamic raw) {
  return raw as String;
}

Uint8List _wire2api_uint_8_list(dynamic raw) {
  return raw as Uint8List;
}

int _wire2api_u8(dynamic raw) {
  return raw as int;
}

Uint8List _wire2api_ZeroCopyBuffer_Uint8List(dynamic raw) {
  return raw as Uint8List;
}

MySize _wire2api_my_size(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return MySize(
    width: _wire2api_i32(arr[0]),
    height: _wire2api_i32(arr[1]),
  );
}

NewTypeInt _wire2api_new_type_int(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
  return NewTypeInt(
    field0: _wire2api_i64(arr[0]),
  );
}

List<MySize> _wire2api_list_my_size(dynamic raw) {
  return (raw as List<dynamic>).map((item) => _wire2api_my_size(item)).toList();
}

MyTreeNode _wire2api_my_tree_node(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
  return MyTreeNode(
    valueI32: _wire2api_i32(arr[0]),
    valueVecU8: _wire2api_uint_8_list(arr[1]),
    children: _wire2api_list_my_tree_node(arr[2]),
  );
}

List<MyTreeNode> _wire2api_list_my_tree_node(dynamic raw) {
  return (raw as List<dynamic>).map((item) => _wire2api_my_tree_node(item)).toList();
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class FlutterRustBridgeExampleWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FlutterRustBridgeExampleWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FlutterRustBridgeExampleWire.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup)
      : _lookup = lookup;

  void wire_simple_adder(
    int port,
    int a,
    int b,
  ) {
    return _wire_simple_adder(
      port,
      a,
      b,
    );
  }

  late final _wire_simple_adderPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Int32)>>('wire_simple_adder');
  late final _wire_simple_adder = _wire_simple_adderPtr.asFunction<void Function(int, int, int)>();

  void wire_primitive_types(
    int port,
    int my_i32,
    int my_i64,
    double my_f64,
    bool my_bool,
  ) {
    return _wire_primitive_types(
      port,
      my_i32,
      my_i64,
      my_f64,
      my_bool ? 1 : 0,
    );
  }

  late final _wire_primitive_typesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Int64, ffi.Double, ffi.Uint8)>>(
          'wire_primitive_types');
  late final _wire_primitive_types = _wire_primitive_typesPtr.asFunction<void Function(int, int, int, double, int)>();

  void wire_handle_string(
    int port,
    ffi.Pointer<wire_uint_8_list> s,
  ) {
    return _wire_handle_string(
      port,
      s,
    );
  }

  late final _wire_handle_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_handle_string');
  late final _wire_handle_string =
      _wire_handle_stringPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_handle_vec_u8(
    int port,
    ffi.Pointer<wire_uint_8_list> v,
  ) {
    return _wire_handle_vec_u8(
      port,
      v,
    );
  }

  late final _wire_handle_vec_u8Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_handle_vec_u8');
  late final _wire_handle_vec_u8 =
      _wire_handle_vec_u8Ptr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_handle_zero_copy_result(
    int port,
    int n,
  ) {
    return _wire_handle_zero_copy_result(
      port,
      n,
    );
  }

  late final _wire_handle_zero_copy_resultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32)>>('wire_handle_zero_copy_result');
  late final _wire_handle_zero_copy_result = _wire_handle_zero_copy_resultPtr.asFunction<void Function(int, int)>();

  void wire_handle_struct(
    int port,
    ffi.Pointer<wire_MySize> arg,
    ffi.Pointer<wire_MySize> boxed,
  ) {
    return _wire_handle_struct(
      port,
      arg,
      boxed,
    );
  }

  late final _wire_handle_structPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_MySize>, ffi.Pointer<wire_MySize>)>>(
          'wire_handle_struct');
  late final _wire_handle_struct =
      _wire_handle_structPtr.asFunction<void Function(int, ffi.Pointer<wire_MySize>, ffi.Pointer<wire_MySize>)>();

  void wire_handle_newtype(
    int port,
    ffi.Pointer<wire_NewTypeInt> arg,
  ) {
    return _wire_handle_newtype(
      port,
      arg,
    );
  }

  late final _wire_handle_newtypePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NewTypeInt>)>>('wire_handle_newtype');
  late final _wire_handle_newtype =
      _wire_handle_newtypePtr.asFunction<void Function(int, ffi.Pointer<wire_NewTypeInt>)>();

  void wire_handle_list_of_struct(
    int port,
    ffi.Pointer<wire_list_my_size> l,
  ) {
    return _wire_handle_list_of_struct(
      port,
      l,
    );
  }

  late final _wire_handle_list_of_structPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_list_my_size>)>>(
          'wire_handle_list_of_struct');
  late final _wire_handle_list_of_struct =
      _wire_handle_list_of_structPtr.asFunction<void Function(int, ffi.Pointer<wire_list_my_size>)>();

  void wire_handle_complex_struct(
    int port,
    ffi.Pointer<wire_MyTreeNode> s,
  ) {
    return _wire_handle_complex_struct(
      port,
      s,
    );
  }

  late final _wire_handle_complex_structPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_MyTreeNode>)>>(
          'wire_handle_complex_struct');
  late final _wire_handle_complex_struct =
      _wire_handle_complex_structPtr.asFunction<void Function(int, ffi.Pointer<wire_MyTreeNode>)>();

  void wire_return_err(
    int port,
  ) {
    return _wire_return_err(
      port,
    );
  }

  late final _wire_return_errPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_return_err');
  late final _wire_return_err = _wire_return_errPtr.asFunction<void Function(int)>();

  void wire_return_panic(
    int port,
  ) {
    return _wire_return_panic(
      port,
    );
  }

  late final _wire_return_panicPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_return_panic');
  late final _wire_return_panic = _wire_return_panicPtr.asFunction<void Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list(
    int len,
  ) {
    return _new_uint_8_list(
      len,
    );
  }

  late final _new_uint_8_listPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>('new_uint_8_list');
  late final _new_uint_8_list = _new_uint_8_listPtr.asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  ffi.Pointer<wire_MySize> new_box_autoadd_my_size() {
    return _new_box_autoadd_my_size();
  }

  late final _new_box_autoadd_my_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_MySize> Function()>>('new_box_autoadd_my_size');
  late final _new_box_autoadd_my_size = _new_box_autoadd_my_sizePtr.asFunction<ffi.Pointer<wire_MySize> Function()>();

  ffi.Pointer<wire_MySize> new_box_my_size() {
    return _new_box_my_size();
  }

  late final _new_box_my_sizePtr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_MySize> Function()>>('new_box_my_size');
  late final _new_box_my_size = _new_box_my_sizePtr.asFunction<ffi.Pointer<wire_MySize> Function()>();

  ffi.Pointer<wire_NewTypeInt> new_box_autoadd_new_type_int() {
    return _new_box_autoadd_new_type_int();
  }

  late final _new_box_autoadd_new_type_intPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_NewTypeInt> Function()>>('new_box_autoadd_new_type_int');
  late final _new_box_autoadd_new_type_int =
      _new_box_autoadd_new_type_intPtr.asFunction<ffi.Pointer<wire_NewTypeInt> Function()>();

  ffi.Pointer<wire_list_my_size> new_list_my_size(
    int len,
  ) {
    return _new_list_my_size(
      len,
    );
  }

  late final _new_list_my_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_list_my_size> Function(ffi.Int32)>>('new_list_my_size');
  late final _new_list_my_size = _new_list_my_sizePtr.asFunction<ffi.Pointer<wire_list_my_size> Function(int)>();

  ffi.Pointer<wire_MyTreeNode> new_box_autoadd_my_tree_node() {
    return _new_box_autoadd_my_tree_node();
  }

  late final _new_box_autoadd_my_tree_nodePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_MyTreeNode> Function()>>('new_box_autoadd_my_tree_node');
  late final _new_box_autoadd_my_tree_node =
      _new_box_autoadd_my_tree_nodePtr.asFunction<ffi.Pointer<wire_MyTreeNode> Function()>();

  ffi.Pointer<wire_list_my_tree_node> new_list_my_tree_node(
    int len,
  ) {
    return _new_list_my_tree_node(
      len,
    );
  }

  late final _new_list_my_tree_nodePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_list_my_tree_node> Function(ffi.Int32)>>('new_list_my_tree_node');
  late final _new_list_my_tree_node =
      _new_list_my_tree_nodePtr.asFunction<ffi.Pointer<wire_list_my_tree_node> Function(int)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>('store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr.asFunction<void Function(DartPostCObjectFnType)>();
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_MySize extends ffi.Struct {
  @ffi.Int32()
  external int width;

  @ffi.Int32()
  external int height;
}

class wire_NewTypeInt extends ffi.Struct {
  @ffi.Int64()
  external int field0;
}

class wire_list_my_size extends ffi.Struct {
  external ffi.Pointer<wire_MySize> ptr;

  @ffi.Int32()
  external int len;
}

class wire_list_my_tree_node extends ffi.Struct {
  external ffi.Pointer<wire_MyTreeNode> ptr;

  @ffi.Int32()
  external int len;
}

class wire_MyTreeNode extends ffi.Struct {
  @ffi.Int32()
  external int value_i32;

  external ffi.Pointer<wire_uint_8_list> value_vec_u8;

  external ffi.Pointer<wire_list_my_tree_node> children;
}

typedef DartPostCObjectFnType = ffi.Pointer<ffi.NativeFunction<ffi.Uint8 Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
