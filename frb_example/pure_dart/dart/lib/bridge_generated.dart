// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports

import 'dart:convert';
import 'dart:typed_data';
import 'package:freezed_annotation/freezed_annotation.dart';

import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'dart:ffi' as ffi;

part 'bridge_generated.freezed.dart';

abstract class FlutterRustBridgeExampleSingleBlockTest {
  Future<Measure?> multiplyByTen({required Measure measure, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMultiplyByTenConstMeta;
}

@freezed
class Distance with _$Distance {
  const factory Distance.unknown() = Distance_Unknown;
  const factory Distance.map(
    double field0,
  ) = Distance_Map;
}

@freezed
class Measure with _$Measure {
  const factory Measure.speed(
    Speed field0,
  ) = Measure_Speed;
  const factory Measure.distance(
    Distance field0,
  ) = Measure_Distance;
}

@freezed
class Speed with _$Speed {
  const factory Speed.unknown() = Speed_Unknown;
  const factory Speed.gps(
    double field0,
  ) = Speed_GPS;
}

class FlutterRustBridgeExampleSingleBlockTestImpl
    extends FlutterRustBridgeBase<FlutterRustBridgeExampleSingleBlockTestWire>
    implements FlutterRustBridgeExampleSingleBlockTest {
  factory FlutterRustBridgeExampleSingleBlockTestImpl(ffi.DynamicLibrary dylib) =>
      FlutterRustBridgeExampleSingleBlockTestImpl.raw(FlutterRustBridgeExampleSingleBlockTestWire(dylib));

  FlutterRustBridgeExampleSingleBlockTestImpl.raw(FlutterRustBridgeExampleSingleBlockTestWire inner) : super(inner);

  Future<Measure?> multiplyByTen({required Measure measure, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_multiply_by_ten(port_, _api2wire_box_autoadd_measure(measure)),
        parseSuccessData: _wire2api_opt_measure,
        constMeta: kMultiplyByTenConstMeta,
        argValues: [measure],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kMultiplyByTenConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "multiply_by_ten",
        argNames: ["measure"],
      );

  // Section: api2wire
  ffi.Pointer<wire_Measure> _api2wire_box_autoadd_measure(Measure raw) {
    final ptr = inner.new_box_autoadd_measure_0();
    _api_fill_to_wire_measure(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<wire_Distance> _api2wire_box_distance(Distance raw) {
    final ptr = inner.new_box_distance_0();
    _api_fill_to_wire_distance(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<wire_Speed> _api2wire_box_speed(Speed raw) {
    final ptr = inner.new_box_speed_0();
    _api_fill_to_wire_speed(raw, ptr.ref);
    return ptr;
  }

  double _api2wire_f64(double raw) {
    return raw;
  }

  // Section: api_fill_to_wire
  void _api_fill_to_wire_box_autoadd_measure(Measure apiObj, ffi.Pointer<wire_Measure> wireObj) {
    _api_fill_to_wire_measure(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_distance(Distance apiObj, ffi.Pointer<wire_Distance> wireObj) {
    _api_fill_to_wire_distance(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_speed(Speed apiObj, ffi.Pointer<wire_Speed> wireObj) {
    _api_fill_to_wire_speed(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_distance(Distance apiObj, wire_Distance wireObj) {
    if (apiObj is Distance_Unknown) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is Distance_Map) {
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_Distance_Map();
      wireObj.kind.ref.Map.ref.field0 = _api2wire_f64(apiObj.field0);
    }
  }

  void _api_fill_to_wire_measure(Measure apiObj, wire_Measure wireObj) {
    if (apiObj is Measure_Speed) {
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_Measure_Speed();
      wireObj.kind.ref.Speed.ref.field0 = _api2wire_box_speed(apiObj.field0);
    }
    if (apiObj is Measure_Distance) {
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_Measure_Distance();
      wireObj.kind.ref.Distance.ref.field0 = _api2wire_box_distance(apiObj.field0);
    }
  }

  void _api_fill_to_wire_speed(Speed apiObj, wire_Speed wireObj) {
    if (apiObj is Speed_Unknown) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is Speed_GPS) {
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_Speed_GPS();
      wireObj.kind.ref.GPS.ref.field0 = _api2wire_f64(apiObj.field0);
    }
  }
}

// Section: wire2api
Distance _wire2api_box_distance(dynamic raw) {
  return _wire2api_distance(raw);
}

Speed _wire2api_box_speed(dynamic raw) {
  return _wire2api_speed(raw);
}

Distance _wire2api_distance(dynamic raw) {
  switch (raw[0]) {
    case 0:
      return Distance_Unknown();
    case 1:
      return Distance_Map(
        _wire2api_f64(raw[1]),
      );
    default:
      throw Exception("unreachable");
  }
}

double _wire2api_f64(dynamic raw) {
  return raw as double;
}

Measure _wire2api_measure(dynamic raw) {
  switch (raw[0]) {
    case 0:
      return Measure_Speed(
        _wire2api_box_speed(raw[1]),
      );
    case 1:
      return Measure_Distance(
        _wire2api_box_distance(raw[1]),
      );
    default:
      throw Exception("unreachable");
  }
}

Measure? _wire2api_opt_measure(dynamic raw) {
  return raw == null ? null : _wire2api_measure(raw);
}

Speed _wire2api_speed(dynamic raw) {
  switch (raw[0]) {
    case 0:
      return Speed_Unknown();
    case 1:
      return Speed_GPS(
        _wire2api_f64(raw[1]),
      );
    default:
      throw Exception("unreachable");
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class FlutterRustBridgeExampleSingleBlockTestWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FlutterRustBridgeExampleSingleBlockTestWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FlutterRustBridgeExampleSingleBlockTestWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup)
      : _lookup = lookup;

  void wire_multiply_by_ten(
    int port_,
    ffi.Pointer<wire_Measure> measure,
  ) {
    return _wire_multiply_by_ten(
      port_,
      measure,
    );
  }

  late final _wire_multiply_by_tenPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Measure>)>>('wire_multiply_by_ten');
  late final _wire_multiply_by_ten =
      _wire_multiply_by_tenPtr.asFunction<void Function(int, ffi.Pointer<wire_Measure>)>();

  ffi.Pointer<wire_Measure> new_box_autoadd_measure_0() {
    return _new_box_autoadd_measure_0();
  }

  late final _new_box_autoadd_measure_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Measure> Function()>>('new_box_autoadd_measure_0');
  late final _new_box_autoadd_measure_0 =
      _new_box_autoadd_measure_0Ptr.asFunction<ffi.Pointer<wire_Measure> Function()>();

  ffi.Pointer<wire_Distance> new_box_distance_0() {
    return _new_box_distance_0();
  }

  late final _new_box_distance_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Distance> Function()>>('new_box_distance_0');
  late final _new_box_distance_0 = _new_box_distance_0Ptr.asFunction<ffi.Pointer<wire_Distance> Function()>();

  ffi.Pointer<wire_Speed> new_box_speed_0() {
    return _new_box_speed_0();
  }

  late final _new_box_speed_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_Speed> Function()>>('new_box_speed_0');
  late final _new_box_speed_0 = _new_box_speed_0Ptr.asFunction<ffi.Pointer<wire_Speed> Function()>();

  ffi.Pointer<DistanceKind> inflate_Distance_Map() {
    return _inflate_Distance_Map();
  }

  late final _inflate_Distance_MapPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DistanceKind> Function()>>('inflate_Distance_Map');
  late final _inflate_Distance_Map = _inflate_Distance_MapPtr.asFunction<ffi.Pointer<DistanceKind> Function()>();

  ffi.Pointer<MeasureKind> inflate_Measure_Speed() {
    return _inflate_Measure_Speed();
  }

  late final _inflate_Measure_SpeedPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<MeasureKind> Function()>>('inflate_Measure_Speed');
  late final _inflate_Measure_Speed = _inflate_Measure_SpeedPtr.asFunction<ffi.Pointer<MeasureKind> Function()>();

  ffi.Pointer<MeasureKind> inflate_Measure_Distance() {
    return _inflate_Measure_Distance();
  }

  late final _inflate_Measure_DistancePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<MeasureKind> Function()>>('inflate_Measure_Distance');
  late final _inflate_Measure_Distance = _inflate_Measure_DistancePtr.asFunction<ffi.Pointer<MeasureKind> Function()>();

  ffi.Pointer<SpeedKind> inflate_Speed_GPS() {
    return _inflate_Speed_GPS();
  }

  late final _inflate_Speed_GPSPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<SpeedKind> Function()>>('inflate_Speed_GPS');
  late final _inflate_Speed_GPS = _inflate_Speed_GPSPtr.asFunction<ffi.Pointer<SpeedKind> Function()>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>('free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct =
      _free_WireSyncReturnStructPtr.asFunction<void Function(WireSyncReturnStruct)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>('store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr.asFunction<void Function(DartPostCObjectFnType)>();
}

class Speed_Unknown extends ffi.Opaque {}

class Speed_GPS extends ffi.Struct {
  @ffi.Double()
  external double field0;
}

class SpeedKind extends ffi.Union {
  external ffi.Pointer<Speed_Unknown> Unknown;

  external ffi.Pointer<Speed_GPS> GPS;
}

class wire_Speed extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<SpeedKind> kind;
}

class Measure_Speed extends ffi.Struct {
  external ffi.Pointer<wire_Speed> field0;
}

class Distance_Unknown extends ffi.Opaque {}

class Distance_Map extends ffi.Struct {
  @ffi.Double()
  external double field0;
}

class DistanceKind extends ffi.Union {
  external ffi.Pointer<Distance_Unknown> Unknown;

  external ffi.Pointer<Distance_Map> Map;
}

class wire_Distance extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<DistanceKind> kind;
}

class Measure_Distance extends ffi.Struct {
  external ffi.Pointer<wire_Distance> field0;
}

class MeasureKind extends ffi.Union {
  external ffi.Pointer<Measure_Speed> Speed;

  external ffi.Pointer<Measure_Distance> Distance;
}

class wire_Measure extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<MeasureKind> kind;
}

typedef DartPostCObjectFnType = ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
