// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

class FlutterRustBridgeExampleSingleBlockTestImpl
    extends FlutterRustBridgeBase<FlutterRustBridgeExampleSingleBlockTestWire>
    implements FlutterRustBridgeExampleSingleBlockTest {
  factory FlutterRustBridgeExampleSingleBlockTestImpl(WasmModule dylib) =>
      FlutterRustBridgeExampleSingleBlockTestImpl.raw(FlutterRustBridgeExampleSingleBlockTestWire(dylib));

  FlutterRustBridgeExampleSingleBlockTestImpl.raw(FlutterRustBridgeExampleSingleBlockTestWire inner) : super(inner);

  Future<int> simpleAdder({required int a, required int b, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_simple_adder(port_, _api2wire_i32(a), _api2wire_i32(b)),
        parseSuccessData: _wire2api_i32,
        constMeta: kSimpleAdderConstMeta,
        argValues: [a, b],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kSimpleAdderConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "simple_adder",
        argNames: ["a", "b"],
      );

  Future<int> primitiveTypes(
          {required int myI32, required int myI64, required double myF64, required bool myBool, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_primitive_types(port_, _api2wire_i32(myI32), _api2wire_i64(myI64), _api2wire_f64(myF64), myBool),
        parseSuccessData: _wire2api_i32,
        constMeta: kPrimitiveTypesConstMeta,
        argValues: [myI32, myI64, myF64, myBool],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kPrimitiveTypesConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "primitive_types",
        argNames: ["myI32", "myI64", "myF64", "myBool"],
      );

  Future<int> primitiveU32({required int myU32, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_primitive_u32(port_, _api2wire_u32(myU32)),
        parseSuccessData: _wire2api_u32,
        constMeta: kPrimitiveU32ConstMeta,
        argValues: [myU32],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kPrimitiveU32ConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "primitive_u32",
        argNames: ["myU32"],
      );

  Future<String> handleString({required String s, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_string(port_, _api2wire_String(s)),
        parseSuccessData: _wire2api_String,
        constMeta: kHandleStringConstMeta,
        argValues: [s],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kHandleStringConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_string",
        argNames: ["s"],
      );

  Future<void> handleReturnUnit({dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_return_unit(port_),
        parseSuccessData: _wire2api_unit,
        constMeta: kHandleReturnUnitConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kHandleReturnUnitConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_return_unit",
        argNames: [],
      );

  Future<Uint8List> handleVecU8({required Uint8List v, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_vec_u8(port_, _api2wire_uint_8_list(v)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kHandleVecU8ConstMeta,
        argValues: [v],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kHandleVecU8ConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_vec_u8",
        argNames: ["v"],
      );

  Future<VecOfPrimitivePack> handleVecOfPrimitive({required int n, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_vec_of_primitive(port_, _api2wire_i32(n)),
        parseSuccessData: _wire2api_vec_of_primitive_pack,
        constMeta: kHandleVecOfPrimitiveConstMeta,
        argValues: [n],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kHandleVecOfPrimitiveConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_vec_of_primitive",
        argNames: ["n"],
      );

  Future<ZeroCopyVecOfPrimitivePack> handleZeroCopyVecOfPrimitive({required int n, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_zero_copy_vec_of_primitive(port_, _api2wire_i32(n)),
        parseSuccessData: _wire2api_zero_copy_vec_of_primitive_pack,
        constMeta: kHandleZeroCopyVecOfPrimitiveConstMeta,
        argValues: [n],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kHandleZeroCopyVecOfPrimitiveConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_zero_copy_vec_of_primitive",
        argNames: ["n"],
      );

  Future<MySize> handleStruct({required MySize arg, required MySize boxed, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_handle_struct(port_, _api2wire_box_autoadd_my_size(arg), _api2wire_box_my_size(boxed)),
        parseSuccessData: _wire2api_my_size,
        constMeta: kHandleStructConstMeta,
        argValues: [arg, boxed],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kHandleStructConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_struct",
        argNames: ["arg", "boxed"],
      );

  Future<NewTypeInt> handleNewtype({required NewTypeInt arg, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_newtype(port_, _api2wire_box_autoadd_new_type_int(arg)),
        parseSuccessData: _wire2api_new_type_int,
        constMeta: kHandleNewtypeConstMeta,
        argValues: [arg],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kHandleNewtypeConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_newtype",
        argNames: ["arg"],
      );

  Future<List<MySize>> handleListOfStruct({required List<MySize> l, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_list_of_struct(port_, _api2wire_list_my_size(l)),
        parseSuccessData: _wire2api_list_my_size,
        constMeta: kHandleListOfStructConstMeta,
        argValues: [l],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kHandleListOfStructConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_list_of_struct",
        argNames: ["l"],
      );

  Future<List<String>> handleStringList({required List<String> names, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_string_list(port_, _api2wire_StringList(names)),
        parseSuccessData: _wire2api_StringList,
        constMeta: kHandleStringListConstMeta,
        argValues: [names],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kHandleStringListConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_string_list",
        argNames: ["names"],
      );

  Future<MyTreeNode> handleComplexStruct({required MyTreeNode s, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_complex_struct(port_, _api2wire_box_autoadd_my_tree_node(s)),
        parseSuccessData: _wire2api_my_tree_node,
        constMeta: kHandleComplexStructConstMeta,
        argValues: [s],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kHandleComplexStructConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_complex_struct",
        argNames: ["s"],
      );

  Uint8List handleSyncReturn({required String mode, dynamic hint}) => executeSync(FlutterRustBridgeSyncTask(
        callFfi: () => inner.wire_handle_sync_return(_api2wire_String(mode)),
        constMeta: kHandleSyncReturnConstMeta,
        argValues: [mode],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kHandleSyncReturnConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_sync_return",
        argNames: ["mode"],
      );

  Stream<String> handleStream({required String arg, dynamic hint}) => executeStream(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_stream(port_, _api2wire_String(arg)),
        parseSuccessData: _wire2api_String,
        constMeta: kHandleStreamConstMeta,
        argValues: [arg],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kHandleStreamConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_stream",
        argNames: ["arg"],
      );

  Stream<MyStreamEntry> handleStreamOfStruct({dynamic hint}) => executeStream(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_stream_of_struct(port_),
        parseSuccessData: _wire2api_my_stream_entry,
        constMeta: kHandleStreamOfStructConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kHandleStreamOfStructConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_stream_of_struct",
        argNames: [],
      );

  Future<int> returnErr({dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_return_err(port_),
        parseSuccessData: _wire2api_i32,
        constMeta: kReturnErrConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kReturnErrConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "return_err",
        argNames: [],
      );

  Future<int> returnPanic({dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_return_panic(port_),
        parseSuccessData: _wire2api_i32,
        constMeta: kReturnPanicConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kReturnPanicConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "return_panic",
        argNames: [],
      );

  Future<double?> handleOptionalReturn({required double left, required double right, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_optional_return(port_, _api2wire_f64(left), _api2wire_f64(right)),
        parseSuccessData: _wire2api_opt_box_autoadd_f64,
        constMeta: kHandleOptionalReturnConstMeta,
        argValues: [left, right],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kHandleOptionalReturnConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_optional_return",
        argNames: ["left", "right"],
      );

  Future<Element?> handleOptionalStruct({String? document, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_optional_struct(port_, _api2wire_opt_String(document)),
        parseSuccessData: _wire2api_opt_box_autoadd_element,
        constMeta: kHandleOptionalStructConstMeta,
        argValues: [document],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kHandleOptionalStructConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_optional_struct",
        argNames: ["document"],
      );

  Future<ExoticOptionals?> handleOptionalIncrement({ExoticOptionals? opt, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_handle_optional_increment(port_, _api2wire_opt_box_autoadd_exotic_optionals(opt)),
        parseSuccessData: _wire2api_opt_box_autoadd_exotic_optionals,
        constMeta: kHandleOptionalIncrementConstMeta,
        argValues: [opt],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kHandleOptionalIncrementConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_optional_increment",
        argNames: ["opt"],
      );

  Future<double> handleIncrementBoxedOptional({double? opt, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_increment_boxed_optional(port_, _api2wire_opt_box_f64(opt)),
        parseSuccessData: _wire2api_f64,
        constMeta: kHandleIncrementBoxedOptionalConstMeta,
        argValues: [opt],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kHandleIncrementBoxedOptionalConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_increment_boxed_optional",
        argNames: ["opt"],
      );

  Future<String> handleOptionBoxArguments(
          {int? i8Box,
          int? u8Box,
          int? i32Box,
          int? i64Box,
          double? f64Box,
          bool? boolbox,
          ExoticOptionals? structbox,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_option_box_arguments(
            port_,
            _api2wire_opt_box_i8(i8Box),
            _api2wire_opt_box_u8(u8Box),
            _api2wire_opt_box_i32(i32Box),
            _api2wire_opt_box_i64(i64Box),
            _api2wire_opt_box_f64(f64Box),
            _api2wire_opt_box_bool(boolbox),
            _api2wire_opt_box_exotic_optionals(structbox)),
        parseSuccessData: _wire2api_String,
        constMeta: kHandleOptionBoxArgumentsConstMeta,
        argValues: [i8Box, u8Box, i32Box, i64Box, f64Box, boolbox, structbox],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kHandleOptionBoxArgumentsConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_option_box_arguments",
        argNames: ["i8Box", "u8Box", "i32Box", "i64Box", "f64Box", "boolbox", "structbox"],
      );

  Future<Uint8List> printNote({required Note note, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_print_note(port_, _api2wire_box_autoadd_note(note)),
        parseSuccessData: _wire2api_ZeroCopyBuffer_Uint8List,
        constMeta: kPrintNoteConstMeta,
        argValues: [note],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kPrintNoteConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "print_note",
        argNames: ["note"],
      );

  Future<Weekdays?> handleReturnEnum({required String input, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_return_enum(port_, _api2wire_String(input)),
        parseSuccessData: _wire2api_opt_weekdays,
        constMeta: kHandleReturnEnumConstMeta,
        argValues: [input],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kHandleReturnEnumConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_return_enum",
        argNames: ["input"],
      );

  Future<Weekdays> handleEnumParameter({required Weekdays weekday, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_enum_parameter(port_, _api2wire_weekdays(weekday)),
        parseSuccessData: _wire2api_weekdays,
        constMeta: kHandleEnumParameterConstMeta,
        argValues: [weekday],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kHandleEnumParameterConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_enum_parameter",
        argNames: ["weekday"],
      );

  Future<void> handleCustomizedStruct({required Customized val, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_customized_struct(port_, _api2wire_box_autoadd_customized(val)),
        parseSuccessData: _wire2api_unit,
        constMeta: kHandleCustomizedStructConstMeta,
        argValues: [val],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kHandleCustomizedStructConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_customized_struct",
        argNames: ["val"],
      );

  Future<KitchenSink> handleEnumStruct({required KitchenSink val, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_enum_struct(port_, _api2wire_box_autoadd_kitchen_sink(val)),
        parseSuccessData: _wire2api_kitchen_sink,
        constMeta: kHandleEnumStructConstMeta,
        argValues: [val],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kHandleEnumStructConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_enum_struct",
        argNames: ["val"],
      );

  Future<bool> useImportedStruct({required MyStruct myStruct, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_use_imported_struct(port_, _api2wire_box_autoadd_my_struct(myStruct)),
        parseSuccessData: _wire2api_bool,
        constMeta: kUseImportedStructConstMeta,
        argValues: [myStruct],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kUseImportedStructConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "use_imported_struct",
        argNames: ["myStruct"],
      );

  Future<bool> useImportedEnum({required MyEnum myEnum, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_use_imported_enum(port_, _api2wire_my_enum(myEnum)),
        parseSuccessData: _wire2api_bool,
        constMeta: kUseImportedEnumConstMeta,
        argValues: [myEnum],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kUseImportedEnumConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "use_imported_enum",
        argNames: ["myEnum"],
      );

  Future<ApplicationSettings> getAppSettings({dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_get_app_settings(port_),
        parseSuccessData: _wire2api_application_settings,
        constMeta: kGetAppSettingsConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGetAppSettingsConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get_app_settings",
        argNames: [],
      );

  Future<bool> isAppEmbedded({required ApplicationSettings appSettings, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_is_app_embedded(port_, _api2wire_box_autoadd_application_settings(appSettings)),
        parseSuccessData: _wire2api_bool,
        constMeta: kIsAppEmbeddedConstMeta,
        argValues: [appSettings],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kIsAppEmbeddedConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "is_app_embedded",
        argNames: ["appSettings"],
      );

  Future<ApplicationMessage> getMessage({dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_get_message(port_),
        parseSuccessData: _wire2api_application_message,
        constMeta: kGetMessageConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGetMessageConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get_message",
        argNames: [],
      );

  Future<Uint8List> getArray({dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_get_array(port_),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kGetArrayConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGetArrayConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get_array",
        argNames: [],
      );

  Future<List<Point>> getComplexArray({dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_get_complex_array(port_),
        parseSuccessData: _wire2api_list_point,
        constMeta: kGetComplexArrayConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGetComplexArrayConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get_complex_array",
        argNames: [],
      );

  Future<int> getUsize({required int u, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_get_usize(port_, _api2wire_usize(u)),
        parseSuccessData: _wire2api_usize,
        constMeta: kGetUsizeConstMeta,
        argValues: [u],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGetUsizeConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get_usize",
        argNames: ["u"],
      );

  Future<UserId> nextUserId({required UserId userId, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_next_user_id(port_, _api2wire_box_autoadd_user_id(userId)),
        parseSuccessData: _wire2api_user_id,
        constMeta: kNextUserIdConstMeta,
        argValues: [userId],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kNextUserIdConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "next_user_id",
        argNames: ["userId"],
      );

  Stream<Event> registerEventListener({dynamic hint}) => executeStream(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_register_event_listener(port_),
        parseSuccessData: _wire2api_event,
        constMeta: kRegisterEventListenerConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kRegisterEventListenerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "register_event_listener",
        argNames: [],
      );

  Future<void> closeEventListener({dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_close_event_listener(port_),
        parseSuccessData: _wire2api_unit,
        constMeta: kCloseEventListenerConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kCloseEventListenerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "close_event_listener",
        argNames: [],
      );

  Future<void> createEvent({dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_create_event(port_),
        parseSuccessData: _wire2api_unit,
        constMeta: kCreateEventConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kCreateEventConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "create_event",
        argNames: [],
      );

  Stream<Log> handleStreamSinkAt1({required int key, required int max, dynamic hint}) =>
      executeStream(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_stream_sink_at_1(port_, _api2wire_u32(key), _api2wire_u32(max)),
        parseSuccessData: _wire2api_log,
        constMeta: kHandleStreamSinkAt1ConstMeta,
        argValues: [key, max],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kHandleStreamSinkAt1ConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_stream_sink_at_1",
        argNames: ["key", "max"],
      );

  Stream<Log> handleStreamSinkAt2({required int key, required int max, dynamic hint}) =>
      executeStream(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_stream_sink_at_2(port_, _api2wire_u32(key), _api2wire_u32(max)),
        parseSuccessData: _wire2api_log,
        constMeta: kHandleStreamSinkAt2ConstMeta,
        argValues: [key, max],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kHandleStreamSinkAt2ConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_stream_sink_at_2",
        argNames: ["key", "max"],
      );

  Stream<Log> handleStreamSinkAt3({required int key, required int max, dynamic hint}) =>
      executeStream(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_stream_sink_at_3(port_, _api2wire_u32(key), _api2wire_u32(max)),
        parseSuccessData: _wire2api_log,
        constMeta: kHandleStreamSinkAt3ConstMeta,
        argValues: [key, max],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kHandleStreamSinkAt3ConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_stream_sink_at_3",
        argNames: ["key", "max"],
      );

  Future<int> sumMethodSumWith({required SumWith that, required int y, required int z, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_sum__method__SumWith(
            port_, _api2wire_box_autoadd_sum_with(that), _api2wire_u32(y), _api2wire_u32(z)),
        parseSuccessData: _wire2api_u32,
        constMeta: kSumMethodSumWithConstMeta,
        argValues: [that, y, z],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kSumMethodSumWithConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "sum__method__SumWith",
        argNames: ["that", "y", "z"],
      );

  Future<ConcatenateWith> newStaticMethodConcatenateWith({required String a, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_new__static_method__ConcatenateWith(port_, _api2wire_String(a)),
        parseSuccessData: (d) => _wire2api_concatenate_with(this, d),
        constMeta: kNewStaticMethodConcatenateWithConstMeta,
        argValues: [a],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodConcatenateWithConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "new__static_method__ConcatenateWith",
        argNames: ["a"],
      );

  Future<String> concatenateMethodConcatenateWith({required ConcatenateWith that, required String b, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_concatenate__method__ConcatenateWith(
            port_, _api2wire_box_autoadd_concatenate_with(that), _api2wire_String(b)),
        parseSuccessData: _wire2api_String,
        constMeta: kConcatenateMethodConcatenateWithConstMeta,
        argValues: [that, b],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kConcatenateMethodConcatenateWithConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "concatenate__method__ConcatenateWith",
        argNames: ["that", "b"],
      );

  Future<String> concatenateStaticStaticMethodConcatenateWith({required String a, required String b, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_concatenate_static__static_method__ConcatenateWith(
            port_, _api2wire_String(a), _api2wire_String(b)),
        parseSuccessData: _wire2api_String,
        constMeta: kConcatenateStaticStaticMethodConcatenateWithConstMeta,
        argValues: [a, b],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kConcatenateStaticStaticMethodConcatenateWithConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "concatenate_static__static_method__ConcatenateWith",
        argNames: ["a", "b"],
      );

  Stream<Log2> handleSomeStreamSinkMethodConcatenateWith(
          {required ConcatenateWith that, required int key, required int max, dynamic hint}) =>
      executeStream(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_some_stream_sink__method__ConcatenateWith(
            port_, _api2wire_box_autoadd_concatenate_with(that), _api2wire_u32(key), _api2wire_u32(max)),
        parseSuccessData: _wire2api_log_2,
        constMeta: kHandleSomeStreamSinkMethodConcatenateWithConstMeta,
        argValues: [that, key, max],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kHandleSomeStreamSinkMethodConcatenateWithConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_some_stream_sink__method__ConcatenateWith",
        argNames: ["that", "key", "max"],
      );

  Stream<int> handleSomeStreamSinkAt1MethodConcatenateWith({required ConcatenateWith that, dynamic hint}) =>
      executeStream(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_some_stream_sink_at_1__method__ConcatenateWith(
            port_, _api2wire_box_autoadd_concatenate_with(that)),
        parseSuccessData: _wire2api_u32,
        constMeta: kHandleSomeStreamSinkAt1MethodConcatenateWithConstMeta,
        argValues: [that],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kHandleSomeStreamSinkAt1MethodConcatenateWithConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_some_stream_sink_at_1__method__ConcatenateWith",
        argNames: ["that"],
      );

  Stream<Log2> handleSomeStaticStreamSinkStaticMethodConcatenateWith(
          {required int key, required int max, dynamic hint}) =>
      executeStream(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_some_static_stream_sink__static_method__ConcatenateWith(
            port_, _api2wire_u32(key), _api2wire_u32(max)),
        parseSuccessData: _wire2api_log_2,
        constMeta: kHandleSomeStaticStreamSinkStaticMethodConcatenateWithConstMeta,
        argValues: [key, max],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kHandleSomeStaticStreamSinkStaticMethodConcatenateWithConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_some_static_stream_sink__static_method__ConcatenateWith",
        argNames: ["key", "max"],
      );

  Stream<int> handleSomeStaticStreamSinkSingleArgStaticMethodConcatenateWith({dynamic hint}) =>
      executeStream(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_handle_some_static_stream_sink_single_arg__static_method__ConcatenateWith(port_),
        parseSuccessData: _wire2api_u32,
        constMeta: kHandleSomeStaticStreamSinkSingleArgStaticMethodConcatenateWithConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kHandleSomeStaticStreamSinkSingleArgStaticMethodConcatenateWithConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_some_static_stream_sink_single_arg__static_method__ConcatenateWith",
        argNames: [],
      );

  // Section: api2wire
  String _api2wire_String(String raw) {
    return raw;
  }

  List<String> _api2wire_StringList(List<String> raw) {
    return raw;
  }

  Uint8List _api2wire_ZeroCopyBuffer_Uint8List(Uint8List raw) {
    return _api2wire_uint_8_list(raw);
  }

  List<dynamic> _api2wire_application_env(ApplicationEnv raw) {
    return const [];
  }

  List<dynamic> _api2wire_application_env_var(ApplicationEnvVar raw) {
    return const [];
  }

  int _api2wire_application_mode(ApplicationMode raw) {
    return _api2wire_i32(raw.index);
  }

  List<dynamic> _api2wire_application_settings(ApplicationSettings raw) {
    return const [];
  }

  List<dynamic> _api2wire_attribute(Attribute raw) {
    return const [];
  }

  bool _api2wire_bool(bool raw) {
    return raw;
  }

  List<dynamic> _api2wire_box_application_env(ApplicationEnv raw) {
    return const [];
  }

  List<dynamic> _api2wire_box_autoadd_application_settings(ApplicationSettings raw) {
    return const [];
  }

  List<dynamic> _api2wire_box_autoadd_attribute(Attribute raw) {
    return const [];
  }

  int /* *bool */ _api2wire_box_autoadd_bool(bool raw) {
    return inner.new_box_autoadd_bool_0(_api2wire_bool(raw));
  }

  List<dynamic> _api2wire_box_autoadd_concatenate_with(ConcatenateWith raw) {
    return const [];
  }

  List<dynamic> _api2wire_box_autoadd_customized(Customized raw) {
    return const [];
  }

  List<dynamic> _api2wire_box_autoadd_exotic_optionals(ExoticOptionals raw) {
    return const [];
  }

  int /* *f64 */ _api2wire_box_autoadd_f64(double raw) {
    return inner.new_box_autoadd_f64_0(_api2wire_f64(raw));
  }

  int /* *i32 */ _api2wire_box_autoadd_i32(int raw) {
    return inner.new_box_autoadd_i32_0(_api2wire_i32(raw));
  }

  int /* *i64 */ _api2wire_box_autoadd_i64(int raw) {
    return inner.new_box_autoadd_i64_0(_api2wire_i64(raw));
  }

  List<dynamic> _api2wire_box_autoadd_kitchen_sink(KitchenSink raw) {
    return const [];
  }

  List<dynamic> _api2wire_box_autoadd_my_size(MySize raw) {
    return const [];
  }

  List<dynamic> _api2wire_box_autoadd_my_struct(MyStruct raw) {
    return const [];
  }

  List<dynamic> _api2wire_box_autoadd_my_tree_node(MyTreeNode raw) {
    return const [];
  }

  List<dynamic> _api2wire_box_autoadd_new_type_int(NewTypeInt raw) {
    return const [];
  }

  List<dynamic> _api2wire_box_autoadd_note(Note raw) {
    return const [];
  }

  List<dynamic> _api2wire_box_autoadd_sum_with(SumWith raw) {
    return const [];
  }

  List<dynamic> _api2wire_box_autoadd_user_id(UserId raw) {
    return const [];
  }

  int /* *bool */ _api2wire_box_bool(bool raw) {
    return inner.new_box_bool_0(_api2wire_bool(raw));
  }

  List<dynamic> _api2wire_box_exotic_optionals(ExoticOptionals raw) {
    return const [];
  }

  int /* *f64 */ _api2wire_box_f64(double raw) {
    return inner.new_box_f64_0(_api2wire_f64(raw));
  }

  int /* *i32 */ _api2wire_box_i32(int raw) {
    return inner.new_box_i32_0(_api2wire_i32(raw));
  }

  int /* *i64 */ _api2wire_box_i64(int raw) {
    return inner.new_box_i64_0(_api2wire_i64(raw));
  }

  int /* *i8 */ _api2wire_box_i8(int raw) {
    return inner.new_box_i8_0(_api2wire_i8(raw));
  }

  List<dynamic> _api2wire_box_kitchen_sink(KitchenSink raw) {
    return const [];
  }

  List<dynamic> _api2wire_box_my_size(MySize raw) {
    return const [];
  }

  int /* *u8 */ _api2wire_box_u8(int raw) {
    return inner.new_box_u8_0(_api2wire_u8(raw));
  }

  int /* *i32 */ _api2wire_box_weekdays(Weekdays raw) {
    return inner.new_box_weekdays_0(_api2wire_weekdays(raw));
  }

  List<dynamic> _api2wire_concatenate_with(ConcatenateWith raw) {
    return const [];
  }

  List<dynamic> _api2wire_customized(Customized raw) {
    return const [];
  }

  List<dynamic> _api2wire_exotic_optionals(ExoticOptionals raw) {
    return const [];
  }

  double _api2wire_f32(double raw) {
    return raw;
  }

  double _api2wire_f64(double raw) {
    return raw;
  }

  Float32List _api2wire_float_32_list(Float32List raw) {
    return raw;
  }

  Float64List _api2wire_float_64_list(Float64List raw) {
    return raw;
  }

  int _api2wire_i32(int raw) {
    return raw;
  }

  int _api2wire_i64(int raw) {
    return raw;
  }

  int _api2wire_i8(int raw) {
    return raw;
  }

  Int32List _api2wire_int_32_list(Int32List raw) {
    return raw;
  }

  Int64List _api2wire_int_64_list(Int64List raw) {
    return raw;
  }

  Int8List _api2wire_int_8_list(Int8List raw) {
    return raw;
  }

  List<dynamic> _api2wire_kitchen_sink(KitchenSink raw) {
    return const [];
  }

  List<dynamic> _api2wire_list_application_env_var(List<ApplicationEnvVar> raw) {
    return raw.map(_api2wire_application_env_var).toList();
  }

  List<dynamic> _api2wire_list_attribute(List<Attribute> raw) {
    return raw.map(_api2wire_attribute).toList();
  }

  List<dynamic> _api2wire_list_my_size(List<MySize> raw) {
    return raw.map(_api2wire_my_size).toList();
  }

  List<dynamic> _api2wire_list_my_tree_node(List<MyTreeNode> raw) {
    return raw.map(_api2wire_my_tree_node).toList();
  }

  List<dynamic> _api2wire_list_opt_box_autoadd_attribute(List<Attribute?> raw) {
    return raw.map(_api2wire_opt_box_autoadd_attribute).toList();
  }

  int _api2wire_my_enum(MyEnum raw) {
    return _api2wire_i32(raw.index);
  }

  List<dynamic> _api2wire_my_size(MySize raw) {
    return const [];
  }

  List<dynamic> _api2wire_my_struct(MyStruct raw) {
    return const [];
  }

  List<dynamic> _api2wire_my_tree_node(MyTreeNode raw) {
    return const [];
  }

  List<dynamic> _api2wire_new_type_int(NewTypeInt raw) {
    return const [];
  }

  List<dynamic> _api2wire_note(Note raw) {
    return const [];
  }

  String? _api2wire_opt_String(String? raw) {
    return raw == null ? null : _api2wire_String(raw);
  }

  Uint8List? _api2wire_opt_ZeroCopyBuffer_Uint8List(Uint8List? raw) {
    return raw == null ? null : _api2wire_ZeroCopyBuffer_Uint8List(raw);
  }

  List<dynamic>? _api2wire_opt_box_autoadd_attribute(Attribute? raw) {
    return raw == null ? null : _api2wire_box_autoadd_attribute(raw);
  }

  int /* *bool */ ? _api2wire_opt_box_autoadd_bool(bool? raw) {
    return raw == null ? null : _api2wire_box_autoadd_bool(raw);
  }

  List<dynamic>? _api2wire_opt_box_autoadd_exotic_optionals(ExoticOptionals? raw) {
    return raw == null ? null : _api2wire_box_autoadd_exotic_optionals(raw);
  }

  int /* *f64 */ ? _api2wire_opt_box_autoadd_f64(double? raw) {
    return raw == null ? null : _api2wire_box_autoadd_f64(raw);
  }

  int /* *i32 */ ? _api2wire_opt_box_autoadd_i32(int? raw) {
    return raw == null ? null : _api2wire_box_autoadd_i32(raw);
  }

  int /* *i64 */ ? _api2wire_opt_box_autoadd_i64(int? raw) {
    return raw == null ? null : _api2wire_box_autoadd_i64(raw);
  }

  List<dynamic>? _api2wire_opt_box_autoadd_new_type_int(NewTypeInt? raw) {
    return raw == null ? null : _api2wire_box_autoadd_new_type_int(raw);
  }

  int /* *bool */ ? _api2wire_opt_box_bool(bool? raw) {
    return raw == null ? null : _api2wire_box_bool(raw);
  }

  List<dynamic>? _api2wire_opt_box_exotic_optionals(ExoticOptionals? raw) {
    return raw == null ? null : _api2wire_box_exotic_optionals(raw);
  }

  int /* *f64 */ ? _api2wire_opt_box_f64(double? raw) {
    return raw == null ? null : _api2wire_box_f64(raw);
  }

  int /* *i32 */ ? _api2wire_opt_box_i32(int? raw) {
    return raw == null ? null : _api2wire_box_i32(raw);
  }

  int /* *i64 */ ? _api2wire_opt_box_i64(int? raw) {
    return raw == null ? null : _api2wire_box_i64(raw);
  }

  int /* *i8 */ ? _api2wire_opt_box_i8(int? raw) {
    return raw == null ? null : _api2wire_box_i8(raw);
  }

  int /* *u8 */ ? _api2wire_opt_box_u8(int? raw) {
    return raw == null ? null : _api2wire_box_u8(raw);
  }

  Float32List? _api2wire_opt_float_32_list(Float32List? raw) {
    return raw == null ? null : _api2wire_float_32_list(raw);
  }

  Float64List? _api2wire_opt_float_64_list(Float64List? raw) {
    return raw == null ? null : _api2wire_float_64_list(raw);
  }

  Int32List? _api2wire_opt_int_32_list(Int32List? raw) {
    return raw == null ? null : _api2wire_int_32_list(raw);
  }

  Int64List? _api2wire_opt_int_64_list(Int64List? raw) {
    return raw == null ? null : _api2wire_int_64_list(raw);
  }

  Int8List? _api2wire_opt_int_8_list(Int8List? raw) {
    return raw == null ? null : _api2wire_int_8_list(raw);
  }

  List<dynamic>? _api2wire_opt_list_attribute(List<Attribute>? raw) {
    return raw == null ? null : _api2wire_list_attribute(raw);
  }

  List<dynamic>? _api2wire_opt_list_opt_box_autoadd_attribute(List<Attribute?>? raw) {
    return raw == null ? null : _api2wire_list_opt_box_autoadd_attribute(raw);
  }

  Uint8List? _api2wire_opt_uint_8_list(Uint8List? raw) {
    return raw == null ? null : _api2wire_uint_8_list(raw);
  }

  List<dynamic> _api2wire_sum_with(SumWith raw) {
    return const [];
  }

  int _api2wire_u32(int raw) {
    return raw;
  }

  int _api2wire_u8(int raw) {
    return raw;
  }

  Uint8List _api2wire_uint_8_list(Uint8List raw) {
    return raw;
  }

  List<dynamic> _api2wire_user_id(UserId raw) {
    return const [];
  }

  int _api2wire_usize(int raw) {
    return raw;
  }

  int _api2wire_weekdays(Weekdays raw) {
    return _api2wire_i32(raw.index);
  }

  // Section: api_fill_to_wire

}

// Section: wire2api
String _wire2api_String(dynamic raw) {
  return raw as String;
}

List<String> _wire2api_StringList(dynamic raw) {
  return (raw as List<dynamic>).cast<String>();
}

Uint8List _wire2api_SyncReturnVecU8(dynamic raw) {
  return raw as Uint8List;
}

Float32List _wire2api_ZeroCopyBuffer_Float32List(dynamic raw) {
  return raw as Float32List;
}

Float64List _wire2api_ZeroCopyBuffer_Float64List(dynamic raw) {
  return raw as Float64List;
}

Int16List _wire2api_ZeroCopyBuffer_Int16List(dynamic raw) {
  return raw as Int16List;
}

Int32List _wire2api_ZeroCopyBuffer_Int32List(dynamic raw) {
  return raw as Int32List;
}

Int64List _wire2api_ZeroCopyBuffer_Int64List(dynamic raw) {
  return raw as Int64List;
}

Int8List _wire2api_ZeroCopyBuffer_Int8List(dynamic raw) {
  return raw as Int8List;
}

Uint16List _wire2api_ZeroCopyBuffer_Uint16List(dynamic raw) {
  return raw as Uint16List;
}

Uint32List _wire2api_ZeroCopyBuffer_Uint32List(dynamic raw) {
  return raw as Uint32List;
}

Uint64List _wire2api_ZeroCopyBuffer_Uint64List(dynamic raw) {
  return raw as Uint64List;
}

Uint8List _wire2api_ZeroCopyBuffer_Uint8List(dynamic raw) {
  return raw as Uint8List;
}

ApplicationEnv _wire2api_application_env(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
  return ApplicationEnv(
    vars: _wire2api_list_application_env_var(arr[0]),
  );
}

ApplicationEnvVar _wire2api_application_env_var(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return ApplicationEnvVar(
    field0: _wire2api_String(arr[0]),
    field1: _wire2api_bool(arr[1]),
  );
}

ApplicationMessage _wire2api_application_message(dynamic raw) {
  switch (raw[0]) {
    case 0:
      return DisplayMessage(
        _wire2api_String(raw[1]),
      );
    case 1:
      return RenderPixel(
        x: _wire2api_i32(raw[1]),
        y: _wire2api_i32(raw[2]),
      );
    case 2:
      return Exit();
    default:
      throw Exception("unreachable");
  }
}

ApplicationMode _wire2api_application_mode(dynamic raw) {
  return ApplicationMode.values[raw];
}

ApplicationSettings _wire2api_application_settings(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
  return ApplicationSettings(
    name: _wire2api_String(arr[0]),
    version: _wire2api_String(arr[1]),
    mode: _wire2api_application_mode(arr[2]),
    env: _wire2api_box_application_env(arr[3]),
  );
}

Attribute _wire2api_attribute(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return Attribute(
    key: _wire2api_String(arr[0]),
    value: _wire2api_String(arr[1]),
  );
}

bool _wire2api_bool(dynamic raw) {
  return raw as bool;
}

ApplicationEnv _wire2api_box_application_env(dynamic raw) {
  return _wire2api_application_env(raw);
}

Attribute _wire2api_box_autoadd_attribute(dynamic raw) {
  return _wire2api_attribute(raw);
}

bool _wire2api_box_autoadd_bool(dynamic raw) {
  return raw as bool;
}

Element _wire2api_box_autoadd_element(dynamic raw) {
  return _wire2api_element(raw);
}

ExoticOptionals _wire2api_box_autoadd_exotic_optionals(dynamic raw) {
  return _wire2api_exotic_optionals(raw);
}

double _wire2api_box_autoadd_f64(dynamic raw) {
  return raw as double;
}

int _wire2api_box_autoadd_i32(dynamic raw) {
  return raw as int;
}

int _wire2api_box_autoadd_i64(dynamic raw) {
  return raw as int;
}

NewTypeInt _wire2api_box_autoadd_new_type_int(dynamic raw) {
  return _wire2api_new_type_int(raw);
}

KitchenSink _wire2api_box_kitchen_sink(dynamic raw) {
  return _wire2api_kitchen_sink(raw);
}

ConcatenateWith _wire2api_concatenate_with(FlutterRustBridgeExampleSingleBlockTest bridge, dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
  return ConcatenateWith(
    bridge: bridge,
    a: _wire2api_String(arr[0]),
  );
}

Element _wire2api_element(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
  return Element(
    tag: _wire2api_opt_String(arr[0]),
    text: _wire2api_opt_String(arr[1]),
    attributes: _wire2api_opt_list_attribute(arr[2]),
    children: _wire2api_opt_list_element(arr[3]),
  );
}

Event _wire2api_event(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return Event(
    address: _wire2api_String(arr[0]),
    payload: _wire2api_String(arr[1]),
  );
}

ExoticOptionals _wire2api_exotic_optionals(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 15) throw Exception('unexpected arr length: expect 15 but see ${arr.length}');
  return ExoticOptionals(
    int32: _wire2api_opt_box_autoadd_i32(arr[0]),
    int64: _wire2api_opt_box_autoadd_i64(arr[1]),
    float64: _wire2api_opt_box_autoadd_f64(arr[2]),
    boolean: _wire2api_opt_box_autoadd_bool(arr[3]),
    zerocopy: _wire2api_opt_ZeroCopyBuffer_Uint8List(arr[4]),
    int8List: _wire2api_opt_int_8_list(arr[5]),
    uint8List: _wire2api_opt_uint_8_list(arr[6]),
    int32List: _wire2api_opt_int_32_list(arr[7]),
    int64List: _wire2api_opt_int_64_list(arr[8]),
    float32List: _wire2api_opt_float_32_list(arr[9]),
    float64List: _wire2api_opt_float_64_list(arr[10]),
    attributes: _wire2api_opt_list_attribute(arr[11]),
    attributesNullable: _wire2api_list_opt_box_autoadd_attribute(arr[12]),
    nullableAttributes: _wire2api_opt_list_opt_box_autoadd_attribute(arr[13]),
    newtypeint: _wire2api_opt_box_autoadd_new_type_int(arr[14]),
  );
}

double _wire2api_f32(dynamic raw) {
  return raw as double;
}

double _wire2api_f64(dynamic raw) {
  return raw as double;
}

Float32List _wire2api_float_32_list(dynamic raw) {
  return raw as Float32List;
}

Float64List _wire2api_float_64_list(dynamic raw) {
  return raw as Float64List;
}

int _wire2api_i16(dynamic raw) {
  return raw as int;
}

int _wire2api_i32(dynamic raw) {
  return raw as int;
}

int _wire2api_i64(dynamic raw) {
  return raw as int;
}

int _wire2api_i8(dynamic raw) {
  return raw as int;
}

Int16List _wire2api_int_16_list(dynamic raw) {
  return raw as Int16List;
}

Int32List _wire2api_int_32_list(dynamic raw) {
  return raw as Int32List;
}

Int64List _wire2api_int_64_list(dynamic raw) {
  return raw as Int64List;
}

Int8List _wire2api_int_8_list(dynamic raw) {
  return raw as Int8List;
}

KitchenSink _wire2api_kitchen_sink(dynamic raw) {
  switch (raw[0]) {
    case 0:
      return Empty();
    case 1:
      return Primitives(
        int32: _wire2api_i32(raw[1]),
        float64: _wire2api_f64(raw[2]),
        boolean: _wire2api_bool(raw[3]),
      );
    case 2:
      return Nested(
        _wire2api_box_kitchen_sink(raw[1]),
        _wire2api_i32(raw[2]),
      );
    case 3:
      return Optional(
        _wire2api_opt_box_autoadd_i32(raw[1]),
        _wire2api_opt_box_autoadd_i32(raw[2]),
      );
    case 4:
      return Buffer(
        _wire2api_ZeroCopyBuffer_Uint8List(raw[1]),
      );
    case 5:
      return Enums(
        _wire2api_weekdays(raw[1]),
      );
    default:
      throw Exception("unreachable");
  }
}

List<ApplicationEnvVar> _wire2api_list_application_env_var(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_application_env_var).toList();
}

List<Attribute> _wire2api_list_attribute(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_attribute).toList();
}

List<Element> _wire2api_list_element(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_element).toList();
}

List<MySize> _wire2api_list_my_size(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_my_size).toList();
}

List<MyTreeNode> _wire2api_list_my_tree_node(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_my_tree_node).toList();
}

List<Attribute?> _wire2api_list_opt_box_autoadd_attribute(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_opt_box_autoadd_attribute).toList();
}

List<Point> _wire2api_list_point(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_point).toList();
}

Log _wire2api_log(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return Log(
    key: _wire2api_u32(arr[0]),
    value: _wire2api_u32(arr[1]),
  );
}

Log2 _wire2api_log_2(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return Log2(
    key: _wire2api_u32(arr[0]),
    value: _wire2api_String(arr[1]),
  );
}

MySize _wire2api_my_size(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return MySize(
    width: _wire2api_i32(arr[0]),
    height: _wire2api_i32(arr[1]),
  );
}

MyStreamEntry _wire2api_my_stream_entry(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
  return MyStreamEntry(
    hello: _wire2api_String(arr[0]),
  );
}

MyTreeNode _wire2api_my_tree_node(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
  return MyTreeNode(
    valueI32: _wire2api_i32(arr[0]),
    valueVecU8: _wire2api_uint_8_list(arr[1]),
    valueBoolean: _wire2api_bool(arr[2]),
    children: _wire2api_list_my_tree_node(arr[3]),
  );
}

NewTypeInt _wire2api_new_type_int(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
  return NewTypeInt(
    field0: _wire2api_i64(arr[0]),
  );
}

String? _wire2api_opt_String(dynamic raw) {
  return raw == null ? null : _wire2api_String(raw);
}

Uint8List? _wire2api_opt_ZeroCopyBuffer_Uint8List(dynamic raw) {
  return raw == null ? null : _wire2api_ZeroCopyBuffer_Uint8List(raw);
}

Attribute? _wire2api_opt_box_autoadd_attribute(dynamic raw) {
  return raw == null ? null : _wire2api_box_autoadd_attribute(raw);
}

bool? _wire2api_opt_box_autoadd_bool(dynamic raw) {
  return raw == null ? null : _wire2api_box_autoadd_bool(raw);
}

Element? _wire2api_opt_box_autoadd_element(dynamic raw) {
  return raw == null ? null : _wire2api_box_autoadd_element(raw);
}

ExoticOptionals? _wire2api_opt_box_autoadd_exotic_optionals(dynamic raw) {
  return raw == null ? null : _wire2api_box_autoadd_exotic_optionals(raw);
}

double? _wire2api_opt_box_autoadd_f64(dynamic raw) {
  return raw == null ? null : _wire2api_box_autoadd_f64(raw);
}

int? _wire2api_opt_box_autoadd_i32(dynamic raw) {
  return raw == null ? null : _wire2api_box_autoadd_i32(raw);
}

int? _wire2api_opt_box_autoadd_i64(dynamic raw) {
  return raw == null ? null : _wire2api_box_autoadd_i64(raw);
}

NewTypeInt? _wire2api_opt_box_autoadd_new_type_int(dynamic raw) {
  return raw == null ? null : _wire2api_box_autoadd_new_type_int(raw);
}

Float32List? _wire2api_opt_float_32_list(dynamic raw) {
  return raw == null ? null : _wire2api_float_32_list(raw);
}

Float64List? _wire2api_opt_float_64_list(dynamic raw) {
  return raw == null ? null : _wire2api_float_64_list(raw);
}

Int32List? _wire2api_opt_int_32_list(dynamic raw) {
  return raw == null ? null : _wire2api_int_32_list(raw);
}

Int64List? _wire2api_opt_int_64_list(dynamic raw) {
  return raw == null ? null : _wire2api_int_64_list(raw);
}

Int8List? _wire2api_opt_int_8_list(dynamic raw) {
  return raw == null ? null : _wire2api_int_8_list(raw);
}

List<Attribute>? _wire2api_opt_list_attribute(dynamic raw) {
  return raw == null ? null : _wire2api_list_attribute(raw);
}

List<Element>? _wire2api_opt_list_element(dynamic raw) {
  return raw == null ? null : _wire2api_list_element(raw);
}

List<Attribute?>? _wire2api_opt_list_opt_box_autoadd_attribute(dynamic raw) {
  return raw == null ? null : _wire2api_list_opt_box_autoadd_attribute(raw);
}

Uint8List? _wire2api_opt_uint_8_list(dynamic raw) {
  return raw == null ? null : _wire2api_uint_8_list(raw);
}

Weekdays? _wire2api_opt_weekdays(dynamic raw) {
  return raw == null ? null : _wire2api_weekdays(raw);
}

Point _wire2api_point(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return Point(
    x: _wire2api_f32(arr[0]),
    y: _wire2api_f32(arr[1]),
  );
}

int _wire2api_u16(dynamic raw) {
  return raw as int;
}

int _wire2api_u32(dynamic raw) {
  return raw as int;
}

int _wire2api_u64(dynamic raw) {
  return raw as int;
}

int _wire2api_u8(dynamic raw) {
  return raw as int;
}

Uint16List _wire2api_uint_16_list(dynamic raw) {
  return raw as Uint16List;
}

Uint32List _wire2api_uint_32_list(dynamic raw) {
  return raw as Uint32List;
}

Uint64List _wire2api_uint_64_list(dynamic raw) {
  return raw as Uint64List;
}

Uint8List _wire2api_uint_8_list(dynamic raw) {
  return raw as Uint8List;
}

void _wire2api_unit(dynamic raw) {
  return;
}

UserId _wire2api_user_id(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
  return UserId(
    value: _wire2api_u32(arr[0]),
  );
}

int _wire2api_usize(dynamic raw) {
  return raw as int;
}

VecOfPrimitivePack _wire2api_vec_of_primitive_pack(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 10) throw Exception('unexpected arr length: expect 10 but see ${arr.length}');
  return VecOfPrimitivePack(
    int8List: _wire2api_int_8_list(arr[0]),
    uint8List: _wire2api_uint_8_list(arr[1]),
    int16List: _wire2api_int_16_list(arr[2]),
    uint16List: _wire2api_uint_16_list(arr[3]),
    uint32List: _wire2api_uint_32_list(arr[4]),
    int32List: _wire2api_int_32_list(arr[5]),
    uint64List: _wire2api_uint_64_list(arr[6]),
    int64List: _wire2api_int_64_list(arr[7]),
    float32List: _wire2api_float_32_list(arr[8]),
    float64List: _wire2api_float_64_list(arr[9]),
  );
}

Weekdays _wire2api_weekdays(dynamic raw) {
  return Weekdays.values[raw];
}

ZeroCopyVecOfPrimitivePack _wire2api_zero_copy_vec_of_primitive_pack(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 10) throw Exception('unexpected arr length: expect 10 but see ${arr.length}');
  return ZeroCopyVecOfPrimitivePack(
    int8List: _wire2api_ZeroCopyBuffer_Int8List(arr[0]),
    uint8List: _wire2api_ZeroCopyBuffer_Uint8List(arr[1]),
    int16List: _wire2api_ZeroCopyBuffer_Int16List(arr[2]),
    uint16List: _wire2api_ZeroCopyBuffer_Uint16List(arr[3]),
    uint32List: _wire2api_ZeroCopyBuffer_Uint32List(arr[4]),
    int32List: _wire2api_ZeroCopyBuffer_Int32List(arr[5]),
    uint64List: _wire2api_ZeroCopyBuffer_Uint64List(arr[6]),
    int64List: _wire2api_ZeroCopyBuffer_Int64List(arr[7]),
    float32List: _wire2api_ZeroCopyBuffer_Float32List(arr[8]),
    float64List: _wire2api_ZeroCopyBuffer_Float64List(arr[9]),
  );
}

// Section: WASM wire functions
@JS(r'wasm_bindgen.wire_simple_adder')
external void _wire_simple_adder(NativePortType port_, int a, int b);

@JS(r'wasm_bindgen.wire_primitive_types')
external void _wire_primitive_types(NativePortType port_, int my_i32, int my_i64, double my_f64, bool my_bool);

@JS(r'wasm_bindgen.wire_primitive_u32')
external void _wire_primitive_u32(NativePortType port_, int my_u32);

@JS(r'wasm_bindgen.wire_handle_string')
external void _wire_handle_string(NativePortType port_, String s);

@JS(r'wasm_bindgen.wire_handle_return_unit')
external void _wire_handle_return_unit(NativePortType port_);

@JS(r'wasm_bindgen.wire_handle_vec_u8')
external void _wire_handle_vec_u8(NativePortType port_, Uint8List v);

@JS(r'wasm_bindgen.wire_handle_vec_of_primitive')
external void _wire_handle_vec_of_primitive(NativePortType port_, int n);

@JS(r'wasm_bindgen.wire_handle_zero_copy_vec_of_primitive')
external void _wire_handle_zero_copy_vec_of_primitive(NativePortType port_, int n);

@JS(r'wasm_bindgen.wire_handle_struct')
external void _wire_handle_struct(NativePortType port_, List<dynamic> arg, List<dynamic> boxed);

@JS(r'wasm_bindgen.wire_handle_newtype')
external void _wire_handle_newtype(NativePortType port_, List<dynamic> arg);

@JS(r'wasm_bindgen.wire_handle_list_of_struct')
external void _wire_handle_list_of_struct(NativePortType port_, List<dynamic> l);

@JS(r'wasm_bindgen.wire_handle_string_list')
external void _wire_handle_string_list(NativePortType port_, List<String> names);

@JS(r'wasm_bindgen.wire_handle_complex_struct')
external void _wire_handle_complex_struct(NativePortType port_, List<dynamic> s);

@JS(r'wasm_bindgen.wire_handle_sync_return')
external WireSyncReturnStruct _wire_handle_sync_return(String mode);

@JS(r'wasm_bindgen.wire_handle_stream')
external void _wire_handle_stream(NativePortType port_, String arg);

@JS(r'wasm_bindgen.wire_handle_stream_of_struct')
external void _wire_handle_stream_of_struct(NativePortType port_);

@JS(r'wasm_bindgen.wire_return_err')
external void _wire_return_err(NativePortType port_);

@JS(r'wasm_bindgen.wire_return_panic')
external void _wire_return_panic(NativePortType port_);

@JS(r'wasm_bindgen.wire_handle_optional_return')
external void _wire_handle_optional_return(NativePortType port_, double left, double right);

@JS(r'wasm_bindgen.wire_handle_optional_struct')
external void _wire_handle_optional_struct(NativePortType port_, String? document);

@JS(r'wasm_bindgen.wire_handle_optional_increment')
external void _wire_handle_optional_increment(NativePortType port_, List<dynamic>? opt);

@JS(r'wasm_bindgen.wire_handle_increment_boxed_optional')
external void _wire_handle_increment_boxed_optional(NativePortType port_, int /* *f64 */ ? opt);

@JS(r'wasm_bindgen.wire_handle_option_box_arguments')
external void _wire_handle_option_box_arguments(
    NativePortType port_,
    int /* *i8 */ ? i8box,
    int /* *u8 */ ? u8box,
    int /* *i32 */ ? i32box,
    int /* *i64 */ ? i64box,
    int /* *f64 */ ? f64box,
    int /* *bool */ ? boolbox,
    List<dynamic>? structbox);

@JS(r'wasm_bindgen.wire_print_note')
external void _wire_print_note(NativePortType port_, List<dynamic> note);

@JS(r'wasm_bindgen.wire_handle_return_enum')
external void _wire_handle_return_enum(NativePortType port_, String input);

@JS(r'wasm_bindgen.wire_handle_enum_parameter')
external void _wire_handle_enum_parameter(NativePortType port_, int weekday);

@JS(r'wasm_bindgen.wire_handle_customized_struct')
external void _wire_handle_customized_struct(NativePortType port_, List<dynamic> val);

@JS(r'wasm_bindgen.wire_handle_enum_struct')
external void _wire_handle_enum_struct(NativePortType port_, List<dynamic> val);

@JS(r'wasm_bindgen.wire_use_imported_struct')
external void _wire_use_imported_struct(NativePortType port_, List<dynamic> my_struct);

@JS(r'wasm_bindgen.wire_use_imported_enum')
external void _wire_use_imported_enum(NativePortType port_, int my_enum);

@JS(r'wasm_bindgen.wire_get_app_settings')
external void _wire_get_app_settings(NativePortType port_);

@JS(r'wasm_bindgen.wire_is_app_embedded')
external void _wire_is_app_embedded(NativePortType port_, List<dynamic> app_settings);

@JS(r'wasm_bindgen.wire_get_message')
external void _wire_get_message(NativePortType port_);

@JS(r'wasm_bindgen.wire_get_array')
external void _wire_get_array(NativePortType port_);

@JS(r'wasm_bindgen.wire_get_complex_array')
external void _wire_get_complex_array(NativePortType port_);

@JS(r'wasm_bindgen.wire_get_usize')
external void _wire_get_usize(NativePortType port_, int u);

@JS(r'wasm_bindgen.wire_next_user_id')
external void _wire_next_user_id(NativePortType port_, List<dynamic> user_id);

@JS(r'wasm_bindgen.wire_register_event_listener')
external void _wire_register_event_listener(NativePortType port_);

@JS(r'wasm_bindgen.wire_close_event_listener')
external void _wire_close_event_listener(NativePortType port_);

@JS(r'wasm_bindgen.wire_create_event')
external void _wire_create_event(NativePortType port_);

@JS(r'wasm_bindgen.wire_handle_stream_sink_at_1')
external void _wire_handle_stream_sink_at_1(NativePortType port_, int key, int max);

@JS(r'wasm_bindgen.wire_handle_stream_sink_at_2')
external void _wire_handle_stream_sink_at_2(NativePortType port_, int key, int max);

@JS(r'wasm_bindgen.wire_handle_stream_sink_at_3')
external void _wire_handle_stream_sink_at_3(NativePortType port_, int key, int max);

@JS(r'wasm_bindgen.wire_sum__method__SumWith')
external void _wire_sum__method__SumWith(NativePortType port_, List<dynamic> that, int y, int z);

@JS(r'wasm_bindgen.wire_new__static_method__ConcatenateWith')
external void _wire_new__static_method__ConcatenateWith(NativePortType port_, String a);

@JS(r'wasm_bindgen.wire_concatenate__method__ConcatenateWith')
external void _wire_concatenate__method__ConcatenateWith(NativePortType port_, List<dynamic> that, String b);

@JS(r'wasm_bindgen.wire_concatenate_static__static_method__ConcatenateWith')
external void _wire_concatenate_static__static_method__ConcatenateWith(NativePortType port_, String a, String b);

@JS(r'wasm_bindgen.wire_handle_some_stream_sink__method__ConcatenateWith')
external void _wire_handle_some_stream_sink__method__ConcatenateWith(
    NativePortType port_, List<dynamic> that, int key, int max);

@JS(r'wasm_bindgen.wire_handle_some_stream_sink_at_1__method__ConcatenateWith')
external void _wire_handle_some_stream_sink_at_1__method__ConcatenateWith(NativePortType port_, List<dynamic> that);

@JS(r'wasm_bindgen.wire_handle_some_static_stream_sink__static_method__ConcatenateWith')
external void _wire_handle_some_static_stream_sink__static_method__ConcatenateWith(
    NativePortType port_, int key, int max);

@JS(r'wasm_bindgen.wire_handle_some_static_stream_sink_single_arg__static_method__ConcatenateWith')
external void _wire_handle_some_static_stream_sink_single_arg__static_method__ConcatenateWith(NativePortType port_);

// Section: WASM wire module
class FlutterRustBridgeExampleSingleBlockTestWire extends FlutterRustBridgeWireBase {
  Future<void> init;
  FlutterRustBridgeExampleSingleBlockTestWire(WasmModule module)
      : init = promiseToFuture(module()).then((_) => eval('window.wasm_bindgen = wasm_bindgen'));

  void wire_simple_adder(NativePortType port_, int a, int b) => init.then((_) => _wire_simple_adder(port_, a, b));

  void wire_primitive_types(NativePortType port_, int my_i32, int my_i64, double my_f64, bool my_bool) =>
      init.then((_) => _wire_primitive_types(port_, my_i32, my_i64, my_f64, my_bool));

  void wire_primitive_u32(NativePortType port_, int my_u32) => init.then((_) => _wire_primitive_u32(port_, my_u32));

  void wire_handle_string(NativePortType port_, String s) => init.then((_) => _wire_handle_string(port_, s));

  void wire_handle_return_unit(NativePortType port_) => init.then((_) => _wire_handle_return_unit(port_));

  void wire_handle_vec_u8(NativePortType port_, Uint8List v) => init.then((_) => _wire_handle_vec_u8(port_, v));

  void wire_handle_vec_of_primitive(NativePortType port_, int n) =>
      init.then((_) => _wire_handle_vec_of_primitive(port_, n));

  void wire_handle_zero_copy_vec_of_primitive(NativePortType port_, int n) =>
      init.then((_) => _wire_handle_zero_copy_vec_of_primitive(port_, n));

  void wire_handle_struct(NativePortType port_, List<dynamic> arg, List<dynamic> boxed) =>
      init.then((_) => _wire_handle_struct(port_, arg, boxed));

  void wire_handle_newtype(NativePortType port_, List<dynamic> arg) =>
      init.then((_) => _wire_handle_newtype(port_, arg));

  void wire_handle_list_of_struct(NativePortType port_, List<dynamic> l) =>
      init.then((_) => _wire_handle_list_of_struct(port_, l));

  void wire_handle_string_list(NativePortType port_, List<String> names) =>
      init.then((_) => _wire_handle_string_list(port_, names));

  void wire_handle_complex_struct(NativePortType port_, List<dynamic> s) =>
      init.then((_) => _wire_handle_complex_struct(port_, s));

  WireSyncReturnStruct wire_handle_sync_return(String mode) => _wire_handle_sync_return(mode);

  void wire_handle_stream(NativePortType port_, String arg) => init.then((_) => _wire_handle_stream(port_, arg));

  void wire_handle_stream_of_struct(NativePortType port_) => init.then((_) => _wire_handle_stream_of_struct(port_));

  void wire_return_err(NativePortType port_) => init.then((_) => _wire_return_err(port_));

  void wire_return_panic(NativePortType port_) => init.then((_) => _wire_return_panic(port_));

  void wire_handle_optional_return(NativePortType port_, double left, double right) =>
      init.then((_) => _wire_handle_optional_return(port_, left, right));

  void wire_handle_optional_struct(NativePortType port_, String? document) =>
      init.then((_) => _wire_handle_optional_struct(port_, document));

  void wire_handle_optional_increment(NativePortType port_, List<dynamic>? opt) =>
      init.then((_) => _wire_handle_optional_increment(port_, opt));

  void wire_handle_increment_boxed_optional(NativePortType port_, int /* *f64 */ ? opt) =>
      init.then((_) => _wire_handle_increment_boxed_optional(port_, opt));

  void wire_handle_option_box_arguments(
          NativePortType port_,
          int /* *i8 */ ? i8box,
          int /* *u8 */ ? u8box,
          int /* *i32 */ ? i32box,
          int /* *i64 */ ? i64box,
          int /* *f64 */ ? f64box,
          int /* *bool */ ? boolbox,
          List<dynamic>? structbox) =>
      init.then(
          (_) => _wire_handle_option_box_arguments(port_, i8box, u8box, i32box, i64box, f64box, boolbox, structbox));

  void wire_print_note(NativePortType port_, List<dynamic> note) => init.then((_) => _wire_print_note(port_, note));

  void wire_handle_return_enum(NativePortType port_, String input) =>
      init.then((_) => _wire_handle_return_enum(port_, input));

  void wire_handle_enum_parameter(NativePortType port_, int weekday) =>
      init.then((_) => _wire_handle_enum_parameter(port_, weekday));

  void wire_handle_customized_struct(NativePortType port_, List<dynamic> val) =>
      init.then((_) => _wire_handle_customized_struct(port_, val));

  void wire_handle_enum_struct(NativePortType port_, List<dynamic> val) =>
      init.then((_) => _wire_handle_enum_struct(port_, val));

  void wire_use_imported_struct(NativePortType port_, List<dynamic> my_struct) =>
      init.then((_) => _wire_use_imported_struct(port_, my_struct));

  void wire_use_imported_enum(NativePortType port_, int my_enum) =>
      init.then((_) => _wire_use_imported_enum(port_, my_enum));

  void wire_get_app_settings(NativePortType port_) => init.then((_) => _wire_get_app_settings(port_));

  void wire_is_app_embedded(NativePortType port_, List<dynamic> app_settings) =>
      init.then((_) => _wire_is_app_embedded(port_, app_settings));

  void wire_get_message(NativePortType port_) => init.then((_) => _wire_get_message(port_));

  void wire_get_array(NativePortType port_) => init.then((_) => _wire_get_array(port_));

  void wire_get_complex_array(NativePortType port_) => init.then((_) => _wire_get_complex_array(port_));

  void wire_get_usize(NativePortType port_, int u) => init.then((_) => _wire_get_usize(port_, u));

  void wire_next_user_id(NativePortType port_, List<dynamic> user_id) =>
      init.then((_) => _wire_next_user_id(port_, user_id));

  void wire_register_event_listener(NativePortType port_) => init.then((_) => _wire_register_event_listener(port_));

  void wire_close_event_listener(NativePortType port_) => init.then((_) => _wire_close_event_listener(port_));

  void wire_create_event(NativePortType port_) => init.then((_) => _wire_create_event(port_));

  void wire_handle_stream_sink_at_1(NativePortType port_, int key, int max) =>
      init.then((_) => _wire_handle_stream_sink_at_1(port_, key, max));

  void wire_handle_stream_sink_at_2(NativePortType port_, int key, int max) =>
      init.then((_) => _wire_handle_stream_sink_at_2(port_, key, max));

  void wire_handle_stream_sink_at_3(NativePortType port_, int key, int max) =>
      init.then((_) => _wire_handle_stream_sink_at_3(port_, key, max));

  void wire_sum__method__SumWith(NativePortType port_, List<dynamic> that, int y, int z) =>
      init.then((_) => _wire_sum__method__SumWith(port_, that, y, z));

  void wire_new__static_method__ConcatenateWith(NativePortType port_, String a) =>
      init.then((_) => _wire_new__static_method__ConcatenateWith(port_, a));

  void wire_concatenate__method__ConcatenateWith(NativePortType port_, List<dynamic> that, String b) =>
      init.then((_) => _wire_concatenate__method__ConcatenateWith(port_, that, b));

  void wire_concatenate_static__static_method__ConcatenateWith(NativePortType port_, String a, String b) =>
      init.then((_) => _wire_concatenate_static__static_method__ConcatenateWith(port_, a, b));

  void wire_handle_some_stream_sink__method__ConcatenateWith(
          NativePortType port_, List<dynamic> that, int key, int max) =>
      init.then((_) => _wire_handle_some_stream_sink__method__ConcatenateWith(port_, that, key, max));

  void wire_handle_some_stream_sink_at_1__method__ConcatenateWith(NativePortType port_, List<dynamic> that) =>
      init.then((_) => _wire_handle_some_stream_sink_at_1__method__ConcatenateWith(port_, that));

  void wire_handle_some_static_stream_sink__static_method__ConcatenateWith(NativePortType port_, int key, int max) =>
      init.then((_) => _wire_handle_some_static_stream_sink__static_method__ConcatenateWith(port_, key, max));

  void wire_handle_some_static_stream_sink_single_arg__static_method__ConcatenateWith(NativePortType port_) =>
      init.then((_) => _wire_handle_some_static_stream_sink_single_arg__static_method__ConcatenateWith(port_));
}
