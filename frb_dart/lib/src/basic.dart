import 'dart:async';
import 'dart:ffi' as ffi;
import 'dart:ffi';
import 'dart:isolate';

import 'package:flutter_rust_bridge/src/utils.dart';
import 'package:meta/meta.dart';

final _instances = <Type>{};

/// Base class for generated bindings of Flutter Rust Bridge.
/// Normally, users do not extend this class manually. Instead,
/// users should directly use the generated class.
abstract class FlutterRustBridgeBase<T extends FlutterRustBridgeWireBase> {
  FlutterRustBridgeBase(this.inner) {
    _sanityCheckSingleton();
    _setUpRustToDartComm();
  }

  @protected
  final T inner;

  void _sanityCheckSingleton() {
    if (_instances.contains(runtimeType)) {
      throw Exception(
          'Subclasses of `FlutterRustBridgeBase` should be singletons - there should not be two instances (runtimeType=$runtimeType)');
    }
    _instances.add(runtimeType);
  }

  void _setUpRustToDartComm() {
    inner.store_dart_post_cobject(NativeApi.postCObject.cast());
  }

  @protected
  Future<S> executeNormal<S>(FlutterRustBridgeTask<S> task) {
    final completer = Completer<dynamic>();
    final sendPort = singleCompletePort(completer);
    task.callFfi(sendPort.nativePort);
    return completer.future.then((dynamic raw) => _transformRust2DartMessage(raw, task.parseSuccessData));
  }

  @protected
  Stream<S> executeStream<S>(FlutterRustBridgeTask<S> task) {
    final receivePort = ReceivePort();
    task.callFfi(receivePort.sendPort.nativePort);
    return receivePort.map((dynamic raw) => _transformRust2DartMessage(raw, task.parseSuccessData));
  }

  S _transformRust2DartMessage<S>(dynamic raw, S Function(dynamic) parseSuccessData) {
    final action = raw[0];
    switch (action) {
      case _RUST2DART_ACTION_SUCCESS:
        assert(raw.length == 2);
        return parseSuccessData(raw[1]);
      case _RUST2DART_ACTION_ERROR:
        assert(raw.length == 4);
        throw FfiException(raw[1], raw[2], raw[3]);
      default:
        throw Exception('Unsupported message, action=$action raw=$raw');
    }
  }

  static const _RUST2DART_ACTION_SUCCESS = 0; // ignore: constant_identifier_names
  static const _RUST2DART_ACTION_ERROR = 1; // ignore: constant_identifier_names
}

@immutable
class FlutterRustBridgeTask<S> {
  final String debugName;
  final void Function(int port) callFfi;
  final S Function(dynamic) parseSuccessData;
  final dynamic hint;

  FlutterRustBridgeTask({
    required this.debugName,
    required this.callFfi,
    required this.parseSuccessData,
    this.hint,
  });
}

/// An exception that is generated by Rust code.
@immutable
class FfiException {
  final String code;
  final String message;
  final Object? details;

  FfiException(this.code, this.message, this.details);

  @override
  String toString() => 'FfiException($code, $message, $details)';
}

/// This class, together with its subclasses, are only for internal usage.
/// Usually it should not be used by normal users.
abstract class FlutterRustBridgeWireBase {
  // ignore: non_constant_identifier_names
  void store_dart_post_cobject(
    ffi.Pointer<ffi.NativeFunction<ffi.Uint8 Function(ffi.Int64, ffi.Pointer<ffi.Void>)>> ptr,
  );
}
